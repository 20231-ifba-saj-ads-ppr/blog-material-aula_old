import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as n,e}from"./app.9d651720.js";const o={},t=e(`<h1 id="revisao-poo-parte-2" tabindex="-1"><a class="header-anchor" href="#revisao-poo-parte-2" aria-hidden="true">#</a> Revis\xE3o POO parte 2</h1><h2 id="heranca" tabindex="-1"><a class="header-anchor" href="#heranca" aria-hidden="true">#</a> Heran\xE7a</h2><p><sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><ul><li><p>\xC9 a capacidade de uma classe definir o seu comportamento e sua estrutura aproveitando defini\xE7\xF5es de outra classe, normalmente conhecida como classe base ou classe pai</p><ul><li>As subclasses herdam tudo o que a classe pai possui e acrescenta as suas caracter\xEDsticas particulares</li><li>Atrav\xE9s do mecanismo de heran\xE7a \xE9 poss\xEDvel definirmos classes gen\xE9ricas que agreguem um conjunto de defini\xE7\xF5es comuns a um grande n\xFAmero de objetos(Generaliza\xE7\xE3o)</li><li>A partir destas especializa\xE7\xF5es gen\xE9ricas podemos construir novas classes, mais espec\xEDficas, que acrescentem novas caracter\xEDsticas e comportamentos aos j\xE1 existentes (Especializa\xE7\xE3o)</li></ul></li><li><p>Capacidade que uma classe tem de herdar as caracter\xEDsticas e comportamentos de outra classe</p></li><li><p>Classe pai \xE9 chamada de superclasse e a filha de subclasse</p></li><li><p>Em Java s\xF3 \xE9 permitido herdar de uma \xFAnica classe, ou seja, n\xE3o permite heran\xE7a m\xFAltipla</p></li><li><p>O objetivo da heran\xE7a \xE9 especializar o entendimento de uma classe criando novas caracter\xEDsticas e comportamentos que v\xE3o al\xE9m da superclasse</p></li><li><p>Ao mesmo tempo que a especializa\xE7\xE3o amplia o entendimento de uma classe, a generaliza\xE7\xE3o vai no sentido inverso e define um modelo menos especializado e mais gen\xE9rico</p></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mamifero</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> altura<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> peso<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mamar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Mamifero mamando&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Morcego</span> <span class="token keyword">extends</span> <span class="token class-name">Mamifero</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> tamanhoPresa<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">voar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Morcego voando&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Classe Morcego <ul><li>Quais as caracter\xEDsticas de morcego? <ul><li>altura</li><li>peso</li><li>tamanhoPresa</li></ul></li><li>Quais a\xE7\xF5es o morcego pode fazer? <ul><li>mamar</li><li>voar</li></ul></li></ul></li><li>Se usarmos os princ\xEDpios de l\xF3gica podemos dizer que todo morcego \xE9 mam\xEDfero por\xE9m N\xC3O podemos afirmar que todo mam\xEDfero \xE9 morcego</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Mamifero</span> animalMamifero <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Morcego</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Morcego</span> batman <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mamifero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//erro</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Com base no que foi dito at\xE9 aqui podemos deduzir que o item 2 deve causar um erro j\xE1 que n\xE3o \xE9 poss\xEDvel garantir que todo mam\xEDfero seja um morcego</li><li>J\xE1 o item 1 pode parecer estranho, pois a vari\xE1vel \xE9 do tipo Mam\xEDfero e o objeto para o qual a vari\xE1vel se refere \xE9 do tipo Morcego <ul><li>Devemos saber que toda vari\xE1vel pode receber um objeto que seja compat\xEDvel com o seu tipo e neste caso todo Morcego CERTAMENTE <strong>\xE9 um</strong> Mam\xEDfero</li></ul></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Mamifero</span> animalMamifero <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Morcego</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
animalMamifero<span class="token punctuation">.</span><span class="token function">mamar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
animalMamifero<span class="token punctuation">.</span><span class="token function">voar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//erro</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Todo <code>Morcego</code> <strong>\xE9 um</strong> <code>Mamifero</code>, porem n\xE3o pode realizar todas as a\xE7\xF5es de um <code>morcego</code></li><li>A vari\xE1vel <code>animalMamifero</code> que recebe o objeto \xE9 do tipo <code>Mamifero</code></li><li>Para o <code>Morcego</code> <code>voar</code> \xE9 necess\xE1rio criar uma nova vari\xE1vel do tipo <code>Morcego</code> e atribuir o objeto que estava na vari\xE1vel <code>animalMamifero</code></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Mamifero</span> animalMamifero <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Morcego</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
animalMamifero<span class="token punctuation">.</span><span class="token function">mamar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Morcego</span> batman <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Morcego</span><span class="token punctuation">)</span>animalMamifero<span class="token punctuation">;</span>
batman<span class="token punctuation">.</span><span class="token function">voar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Este tipo de opera\xE7\xE3o recebe o nome de <strong>TYPE CAST</strong></li></ul><figure><img src="https://www.plantuml.com/plantuml/svg/JOux3i8m343tdC8Z2EK63Ba04bSmZMaZ9J6odIxGkrErfCABF_9xTb13iLQo2qVbXeogSCEIdYJyTh26JzK0ipN1lO_S7fdWHShRu39pYb2me9pERZaiB0EDNVA3RDsg4z-55F_WcJlRRyFrutrtk40rRg_k-Gi0" alt="uml diagram" loading="lazy"><figcaption> UML Heran\xE7a Morcego e Mamifero.</figcaption></figure><figure><img src="https://www.plantuml.com/plantuml/svg/LP0zRiCm34Ptde9mb_GAxMAWSu0U80jjVtKLK9H1IMc18dUlOpK_dVX0uV41wdCHBpKgzLVYDmzYK-8QEGr7bCJ2o_eMd2VXN8TH9MSGgGnGxWnVl4y-Oawxvux8CHQnMS7TtxhZfqKKimFsgi7mqh3WkpJykHuh4iK-qxiZoy5EINoz-QZV7MR-rv8OFk2Nc6WOCMX5YssqUHUwfKHBzJMo8AU3nJNSMdVxvj2PpapKmwRjhzhy1G00" alt="uml diagram" loading="lazy"><figcaption>Criando um objeto a partir da subclasse.</figcaption></figure><h3 id="outros-exemplos" tabindex="-1"><a class="header-anchor" href="#outros-exemplos" aria-hidden="true">#</a> Outros exemplos</h3><h4 id="caelum" tabindex="-1"><a class="header-anchor" href="#caelum" aria-hidden="true">#</a> Caelum</h4><p><sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></p><p>Como toda empresa, nosso Banco possui funcion\xE1rios. Vamos modelar a classe <code>Funcionario</code>:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> nome<span class="token punctuation">;</span>
    <span class="token class-name">String</span> cpf<span class="token punctuation">;</span>
    <span class="token keyword">double</span> salario<span class="token punctuation">;</span>
    <span class="token comment">// m\xE9todos devem vir aqui</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Al\xE9m de um funcion\xE1rio comum, h\xE1 tamb\xE9m outros cargos, como os gerentes. Os gerentes guardam a mesma informa\xE7\xE3o que um funcion\xE1rio comum, mas possuem outras informa\xE7\xF5es, al\xE9m de ter funcionalidades um pouco diferentes. Um gerente no nosso banco possui tamb\xE9m uma senha num\xE9rica que permite o acesso ao sistema interno do banco, al\xE9m do n\xFAmero de funcion\xE1rios que ele gerencia:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Gerente</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> nome<span class="token punctuation">;</span>
    <span class="token class-name">String</span> cpf<span class="token punctuation">;</span>
    <span class="token keyword">double</span> salario<span class="token punctuation">;</span>
    <span class="token keyword">int</span> senha<span class="token punctuation">;</span>
    <span class="token keyword">int</span> numeroDeFuncionariosGerenciados<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">autentica</span><span class="token punctuation">(</span><span class="token keyword">int</span> senha<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>senha <span class="token operator">==</span> senha<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Acesso Permitido!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Acesso Negado!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// outros m\xE9todos</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">Precisamos mesmo de outra classe?</p><p>Poder\xEDamos ter deixado a classe <code>Funcionario</code> mais gen\xE9rica, mantendo nela senha de acesso, e o n\xFAmero de funcion\xE1rios gerenciados. Caso o funcion\xE1rio n\xE3o fosse um gerente, deixar\xEDamos estes atributos vazios.</p><p>Essa \xE9 uma possibilidade, por\xE9m podemos come\xE7ar a ter muito atributos opcionais, e a classe ficaria estranha. E em rela\xE7\xE3o aos m\xE9todos? A classe Gerente tem o m\xE9todo autentica, que n\xE3o faz sentido existir em um funcion\xE1rio que n\xE3o \xE9 gerente</p></div><p>Se tiv\xE9ssemos um outro tipo de funcion\xE1rio que tem caracter\xEDsticas diferentes do funcion\xE1rio comum, precisar\xEDamos criar uma outra classe e copiar o c\xF3digo novamente!</p><p>Al\xE9m disso, se um dia precisarmos adicionar uma nova informa\xE7\xE3o para todos os funcion\xE1rios, precisaremos passar por todas as classes de funcion\xE1rio e adicionar esse atributo. O problema acontece novamente por n\xE3o centralizarmos as informa\xE7\xF5es principais do funcion\xE1rio em um \xFAnico lugar!</p><p>Existe um jeito, em Java, de relacionarmos uma classe de tal maneira que uma delas <strong>herda</strong> tudo que a outra tem. Isto \xE9 uma rela\xE7\xE3o de classe m\xE3e e classe filha. No nosso caso, gostar\xEDamos de fazer com que o <code>Gerente</code> tivesse tudo que um <code>Funcionario</code> tem, gostar\xEDamos que ela fosse uma <strong>extens\xE3o</strong> de <code>Funcionario</code>. Fazemos isto atrav\xE9s da palavra chave <code>extends</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Gerente</span> <span class="token keyword">extends</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> senha<span class="token punctuation">;</span>
    <span class="token keyword">int</span> numeroDeFuncionariosGerenciados<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">autentica</span><span class="token punctuation">(</span><span class="token keyword">int</span> senha<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>senha <span class="token operator">==</span> senha<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Acesso Permitido!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Acesso Negado!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// setter da senha omitido</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Em todo momento que criarmos um objeto do tipo Gerente, este objeto possuir\xE1 tamb\xE9m os atributos definidos na classe Funcionario, pois um Gerente <strong>\xE9 um</strong> Funcionario:</p><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0iznAyv8py_CIYpBp5MngT7KLt5EBKlDAKhaSKlDIm4eXD000" alt="uml diagram" loading="lazy"><figcaption>Heran\xE7a entre Funcionario e Gerente.</figcaption></figure><figure><img src="https://www.plantuml.com/plantuml/svg/PP1DJiGm38NtFeNLsS0LO5C9D5oY6oTzb8nSfygFG4Az-vIMbagiyYdn-_BaDXT9fOvAxKxyae9O7xcE7DqD9RBmjBo5nBrmhiwhv0mY5GVbnl39RqYmWeV7XYZ15x51mStlTSENIHH30knPW-5fmuAlik7tBikm3-dCweWKNt6jvaCqII7cLUQ3z35t9hKivk1b-V9i_rEUUvmqoxHey71QiNLPQStzqD74ueZE_FJUMHRz5pq2p4mppKpKmlfrbTjv1m00" alt="uml diagram" loading="lazy"><figcaption>Criando um objeto a partir da subclasse.</figcaption></figure><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">TestaGerente</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Gerente</span> gerente <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gerente</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// podemos chamar m\xE9todos do Funcionario:</span>
        gerente<span class="token punctuation">.</span><span class="token function">setNome</span><span class="token punctuation">(</span><span class="token string">&quot;Jo\xE3o da Silva&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// e tamb\xE9m m\xE9todos do Gerente!</span>
        gerente<span class="token punctuation">.</span><span class="token function">setSenha</span><span class="token punctuation">(</span><span class="token number">4231</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dizemos que a classe <code>Gerente</code> <strong>herda</strong> todos os atributos e m\xE9todos da classe m\xE3e, no nosso caso, a <code>Funcionario</code>. Para ser mais preciso, ela tamb\xE9m herda os atributos e m\xE9todos privados, por\xE9m n\xE3o consegue acess\xE1-los diretamente. Para acessar um membro privado na filha indiretamente, seria necess\xE1rio que a m\xE3e expusesse um outro m\xE9todo vis\xEDvel que invocasse esse atributo ou m\xE9todo privado.</p><div class="custom-container tip"><p class="custom-container-title">Super e Sub classe</p><p>A nomenclatura mais encontrada \xE9 que <code>Funcionario</code> \xE9 a superclasse de <code>Gerente</code>, e <code>Gerente</code> \xE9 a subclasse de <code>Funcionario</code>. Dizemos tamb\xE9m que todo <code>Gerente</code> <strong>\xE9 um</strong> <code>Funcionario</code>. Outra forma \xE9 dizer que <code>Funcionario</code> \xE9 classe m\xE3e de <code>Gerente</code> e <code>Gerente</code> \xE9 classe filha de <code>Funcionario</code>.</p></div><p>E se precisamos acessar os atributos que herdamos? N\xE3o gostar\xEDamos de deixar os atributos de <code>Funcionario</code> <strong>public</strong>, pois dessa maneira qualquer um poderia alterar os atributos dos objetos deste tipo. Existe um outro modificador de acesso, o <strong>protected</strong>, que fica entre o <strong>private</strong> e o <strong>public</strong>. Um atributo <strong>protected</strong> s\xF3 pode ser acessado (vis\xEDvel) pela pr\xF3pria classe e por suas subclasses (e mais algumas outras classes, mas veremos isso mais adiante).</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> nome<span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> cpf<span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">double</span> salario<span class="token punctuation">;</span>
    <span class="token comment">// m\xE9todos devem vir aqui</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Sempre usar protected?</p><p>Ent\xE3o porque usar private? Depois de um tempo programando orientado a objetos, voc\xEA vai come\xE7ar a sentir que nem sempre \xE9 uma boa ideia deixar que a classe filha acesse os atributos da classe m\xE3e, pois isso quebra um pouco a ideia de que s\xF3 aquela classe deveria manipular seus atributos. Essa \xE9 uma discuss\xE3o um pouco mais avan\xE7ada.</p><p>Al\xE9m disso, n\xE3o s\xF3 as subclasses, mas tamb\xE9m as outras classes, podem acessar os atributos protected, que veremos mais a frente (mesmo pacote).</p></div><p>Da mesma maneira, podemos ter uma classe <code>Diretor</code> que estenda <code>Gerente</code> e a classe <code>Presidente</code> pode estender diretamente de <code>Funcionario</code>.</p><p>Fique claro que essa \xE9 uma decis\xE3o de neg\xF3cio. Se <code>Diretor</code> vai estender de <code>Gerente</code> ou n\xE3o, vai depender se, para voc\xEA, <code>Diretor</code> <strong>\xE9 um</strong> <code>Gerente</code>.</p><p>Uma classe pode ter v\xE1rias filhas, mas pode ter apenas uma m\xE3e, \xE9 a chamada heran\xE7a simples do java.</p><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0iznAyv8py_CIYpBp5MngT7KLNFFIK_CoKZEByZ7bWbEJYr9BG7nCEVVKejIyabGkA0qHTCa4giyluk9oICrB0LiCeG40" alt="uml diagram" loading="lazy"><figcaption>Heran\xE7a de Diretor, Engenheiro, Secretario, Gerente com Funcionario</figcaption></figure><h4 id="k19" tabindex="-1"><a class="header-anchor" href="#k19" aria-hidden="true">#</a> K19</h4><p><sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup></p><h5 id="reutilizacao-de-codigo" tabindex="-1"><a class="header-anchor" href="#reutilizacao-de-codigo" aria-hidden="true">#</a> Reutiliza\xE7\xE3o de C\xF3digo</h5><p>Um banco oferece diversos servi\xE7os que podem ser contratados individualmente pelos clientes. Quando um servi\xE7o \xE9 contratado, o sistema do banco deve registrar quem foi o cliente que contratou o servi\xE7o, quem foi o funcion\xE1rio respons\xE1vel pelo atendimento ao cliente e a data de contrata\xE7\xE3o.</p><p>Com o intuito de ser produtivo, a modelagem dos servi\xE7os do banco deve diminuir a repeti\xE7\xE3o de c\xF3digo. A ideia \xE9 reaproveitar o m\xE1ximo do c\xF3digo j\xE1 criado. Essa ideia est\xE1 diretamente relacionada ao conceito Don\u2019t Repeat Yourself. Em outras palavras, devemos minimizar ao m\xE1ximo a utiliza\xE7\xE3o do &quot;copiar e colar&quot;. O aumento da produtividade e a diminui\xE7\xE3o do custo de manuten\xE7\xE3o s\xE3o as principais motiva\xE7\xF5es do DRY.</p><p>Em seguida, vamos discutir algumas modelagens poss\xEDveis para os servi\xE7os do banco. Buscaremos seguir a ideia do DRY na cria\xE7\xE3o dessas modelagens.</p><h5 id="uma-classe-para-todos-os-servicos" tabindex="-1"><a class="header-anchor" href="#uma-classe-para-todos-os-servicos" aria-hidden="true">#</a> Uma classe para todos os servi\xE7os</h5><p>Poder\xEDamos definir apenas uma classe para modelar todos os tipos de servi\xE7os que o banco oferece.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Cliente</span> contratante <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Funcionario</span> responsavel <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> dataDeContratacao <span class="token punctuation">;</span>
    <span class="token comment">// m\xE9todos</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="emprestimo" tabindex="-1"><a class="header-anchor" href="#emprestimo" aria-hidden="true">#</a> Empr\xE9stimo</h6><p>O empr\xE9stimo \xE9 um dos servi\xE7os que o banco oferece. Quando um cliente contrata esse servi\xE7o, s\xE3o definidos o valor e a taxa de juros mensal do empr\xE9stimo. Devemos acrescentar dois atributos na classe <code>Servico</code>: um para o valor e outro para a taxa de juros do servi\xE7o de empr\xE9stimo.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
    <span class="token comment">// GERAL</span>
    <span class="token keyword">private</span> <span class="token class-name">Cliente</span> contratante<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Funcionario</span> responsavel<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> dataDeContratacao<span class="token punctuation">;</span>
    <span class="token comment">// EMPR\xC9STIMO</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> valor<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> taxa<span class="token punctuation">;</span>
    <span class="token comment">// m\xE9todos</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="seguro-de-veiculos" tabindex="-1"><a class="header-anchor" href="#seguro-de-veiculos" aria-hidden="true">#</a> Seguro de ve\xEDculos</h6><p>Outro servi\xE7o oferecido pelo banco \xE9 o seguro de ve\xEDculos. Para esse servi\xE7o devem ser definidas as seguintes informa\xE7\xF5es: ve\xEDculo segurado, valor do seguro e a franquia. Devemos adicionar tr\xEAs atributos na classe <code>Servico</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
    <span class="token comment">// GERAL</span>
    <span class="token keyword">private</span> <span class="token class-name">Cliente</span> contratante <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Funcionario</span> responsavel <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> dataDeContratacao <span class="token punctuation">;</span>
    <span class="token comment">// EMPR\xC9STIMO</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> valor <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> taxa <span class="token punctuation">;</span>
    <span class="token comment">// SEGURO DE VEICULO</span>
    <span class="token keyword">private</span> <span class="token class-name">Veiculo</span> veiculo <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> valorDoSeguroDeVeiculo <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> franquia <span class="token punctuation">;</span>
    <span class="token comment">// m\xE9todos</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Apesar de seguir a ideia do DRY, modelar todos os servi\xE7os com apenas uma classe pode dificultar o desenvolvimento. Supondo que dois ou mais desenvolvedores s\xE3o respons\xE1veis pela implementa\xE7\xE3o dos servi\xE7os, eles provavelmente modificariam a mesma classe concorrentemente. Al\xE9m disso, os desenvolvedores, principalmente os rec\xE9m chegados no projeto do banco, ficariam confusos com o c\xF3digo extenso da classe <code>Servico</code>.</p><p>Outro problema \xE9 que um objeto da classe <code>Servico</code> possui atributos para todos os servi\xE7os que o banco oferece. Na verdade, ele deveria possuir apenas os atributos relacionados a um servi\xE7o. Do ponto de vista de performance, essa abordagem causaria um consumo desnecess\xE1rio de mem\xF3ria.</p><h5 id="uma-classe-para-cada-servico" tabindex="-1"><a class="header-anchor" href="#uma-classe-para-cada-servico" aria-hidden="true">#</a> Uma classe para cada servi\xE7o</h5><p>Para modelar melhor os servi\xE7os, evitando uma quantidade grande de atributos e m\xE9todos desnecess\xE1rios, criaremos uma classe para cada servi\xE7o.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">SeguroDeVeiculo</span> <span class="token punctuation">{</span>
    <span class="token comment">// GERAL</span>
    <span class="token keyword">private</span> <span class="token class-name">Cliente</span> contratante <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Funcionario</span> responsavel <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> dataDeContratacao <span class="token punctuation">;</span>
    <span class="token comment">// SEGURO DE VEICULO</span>
    <span class="token keyword">private</span> <span class="token class-name">Veiculo</span> veiculo <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> valorDoSeguroDeVeiculo <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> franquia <span class="token punctuation">;</span>
    <span class="token comment">// m\xE9todos</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Emprestimo</span> <span class="token punctuation">{</span>
    <span class="token comment">// GERAL</span>
    <span class="token keyword">private</span> <span class="token class-name">Cliente</span> contratante <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Funcionario</span> responsavel <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> dataDeContratacao <span class="token punctuation">;</span>
    <span class="token comment">// EMPR\xC9STIMO</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> valor <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> taxa <span class="token punctuation">;</span>
    <span class="token comment">// m\xE9todos</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Criar uma classe para cada servi\xE7o torna o sistema mais flex\xEDvel, pois qualquer altera\xE7\xE3o em um determinado servi\xE7o n\xE3o causar\xE1 efeitos colaterais nos outros. Mas, por outro lado, essas classes teriam bastante c\xF3digo repetido, contrariando a ideia do DRY. Al\xE9m disso, qualquer altera\xE7\xE3o que deva ser realizada em todos os servi\xE7os precisa ser implementada em cada uma das classes.</p><h5 id="uma-classe-generica-e-varias-especificas" tabindex="-1"><a class="header-anchor" href="#uma-classe-generica-e-varias-especificas" aria-hidden="true">#</a> Uma classe gen\xE9rica e v\xE1rias espec\xEDficas</h5><p>Na modelagem dos servi\xE7os do banco, podemos aplicar um conceito de orienta\xE7\xE3o a objetos chamado Heran\xE7a. A ideia \xE9 reutilizar o c\xF3digo de uma determinada classe em outras classes.</p><p>Aplicando heran\xE7a, ter\xEDamos a classe <code>Servico</code> com os atributos e m\xE9todos que todos os servi\xE7os devem ter e uma classe para cada servi\xE7o com os atributos e m\xE9todos espec\xEDficos do determinado servi\xE7o.</p><p>As classes espec\xEDficas seriam &quot;ligadas&quot; de alguma forma \xE0 classe <code>Servico</code> para reaproveitar o c\xF3digo nela definido. Esse relacionamento entre as classes \xE9 representado em UML pelo diagrama abaixo</p><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0iu9JYyeoa_CLR6fqTHM2KzDBY_9TKiDICvDBS_9H9Lrp2ufIYqioS_Ev75BpKi36G6W0" alt="uml diagram" loading="lazy"><figcaption>\xC1rvore de heran\xE7a dos servi\xE7os</figcaption></figure><p>Os objetos das classes espec\xEDficas <code>Emprestimo</code> e <code>SeguroDeVeiculo</code> possuiriam tanto os atributos e m\xE9todos definidos nessas classes quanto os definidos na classe <code>Servico</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Emprestimo</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Emprestimo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token comment">// Chamando um m\xE9todo da classe Servico</span>
e<span class="token punctuation">.</span><span class="token function">setDataDeContratacao</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token class-name">Month</span><span class="token punctuation">.</span><span class="token constant">JANUARY</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token comment">// Chamando um m\xE9todo da classe Emprestimo</span>
e<span class="token punctuation">.</span><span class="token function">setValor</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As classes espec\xEDficas s\xE3o vinculadas a classe gen\xE9rica utilizando o comando extends. N\xE3o \xE9 necess\xE1rio redefinir o conte\xFAdo j\xE1 declarado na classe gen\xE9rica.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Cliente</span> contratante<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Funcionario</span> responsavel<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> dataDeContratacao<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Emprestimo</span> <span class="token keyword">extends</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> valor<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> taxa<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><div class="highlight-line">\xA0</div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">SeguroDeVeiculo</span> <span class="token keyword">extends</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Veiculo</span> veiculo<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> valorDoSeguroDeVeiculo<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> franquia<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><div class="highlight-line">\xA0</div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A classe gen\xE9rica \xE9 denominada super classe, classe base ou classe m\xE3e. As classes espec\xEDficas s\xE3o denominadas sub classes, classes derivadas ou classes filhas.</p><p>Quando o operador <code>new</code> \xE9 aplicado em uma sub classe, o objeto constru\xEDdo possuir\xE1 os atributos e m\xE9todos definidos na sub classe e na super classe.</p><figure><img src="https://www.plantuml.com/plantuml/svg/LP0nRiCm34Ltde9mb_OAxM8WxGcwUg7bZq05JHaKxGOeSlSwTfCqanxq-Py4jZN4OnwLsYlnmRFOK7WUkVHVYCB2qvfbvq6updrIgHL4AZsK6yCtVuoJeqOUo_DBG-H88NPKS7DF6dwQH75qmDuq6rvt39nYnv-hSX4jtbd8IHvQzz7_Jtp2bvmkVj6SqEkCtR_HrhdGpPwAXSlQ3dIsVcugLcM1TZQij-yu_EL97fqt4pFJcSvCrCA6RNlx-Gi0" alt="uml diagram" loading="lazy"><figcaption>Criando um objeto a partir da subclasse.</figcaption></figure><h3 id="sobrecrita-de-metodos" tabindex="-1"><a class="header-anchor" href="#sobrecrita-de-metodos" aria-hidden="true">#</a> Sobrecrita de M\xE9todos</h3><h4 id="caelum-1" tabindex="-1"><a class="header-anchor" href="#caelum-1" aria-hidden="true">#</a> Caelum</h4><p><sup class="footnote-ref"><a href="#footnote2">[2:1]</a><a class="footnote-anchor" id="footnote-ref2:1"></a></sup></p><p>Todo fim de ano, os funcion\xE1rios do nosso banco recebem uma bonifica\xE7\xE3o. Os funcion\xE1rios comuns recebem 10% do valor do sal\xE1rio e os gerentes, 15%.</p><p>Vamos ver como fica a classe Funcionario:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> nome<span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> cpf<span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">double</span> salario<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBonificacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>salario <span class="token operator">*</span> <span class="token number">0.10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// m\xE9todos</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Se deixarmos a classe <code>Gerente</code> como ela est\xE1, ela vai herdar o m\xE9todo <code>getBonificacao</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Gerente</span> gerente <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gerente</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
gerente<span class="token punctuation">.</span><span class="token function">setSalario</span><span class="token punctuation">(</span><span class="token number">5000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gerente<span class="token punctuation">.</span><span class="token function">getBonificacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>O resultado aqui ser\xE1 <code>500</code>. N\xE3o queremos essa resposta, pois o gerente deveria ter <code>750</code> de b\xF4nus nesse caso. Para consertar isso, uma das op\xE7\xF5es seria criar um novo m\xE9todo na classe Gerente, chamado, por exemplo, <code>getBonificacaoDoGerente</code>. O problema \xE9 que ter\xEDamos dois m\xE9todos em Gerente, confundindo bastante quem for usar essa classe, al\xE9m de que cada um da uma resposta diferente.</p><p>No Java, quando herdamos um m\xE9todo, podemos alterar seu comportamento. Podemos reescrever (reescrever, sobrescrever, override) este m\xE9todo:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Gerente</span> <span class="token keyword">extends</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> senha<span class="token punctuation">;</span>
    <span class="token keyword">int</span> numeroDeFuncionariosGerenciados<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBonificacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>salario <span class="token operator">*</span> <span class="token number">0.15</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Agora o m\xE9todo est\xE1 correto para o <code>Gerente</code>. Refa\xE7a o teste e veja que o valor impresso \xE9 o correto <code>750</code>:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Gerente</span> gerente <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gerente</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
gerente<span class="token punctuation">.</span><span class="token function">setSalario</span><span class="token punctuation">(</span><span class="token number">5000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gerente<span class="token punctuation">.</span><span class="token function">getBonificacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">A anota\xE7\xE3o @Override</p><p>H\xE1 como deixar expl\xEDcito no seu c\xF3digo que determinador m\xE9todo \xE9 a reescrita de um m\xE9todo da sua classe m\xE3e. Fazemos isso colocando <code>@Override</code> em cima do m\xE9todo. Isso \xE9 chamado <strong>anota\xE7\xE3o</strong>. Existem diversas anota\xE7\xF5es e cada uma vai ter um efeito diferente sobre seu c\xF3digo.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBonificacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>salario <span class="token operator">*</span> <span class="token number">0.15</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Perceba que, por quest\xF5es de compatibilidade, isso n\xE3o \xE9 obrigat\xF3rio. Mas caso um m\xE9todo esteja anotado com <code>@Override</code>, ele necessariamente precisa estar reescrevendo um m\xE9todo da classe m\xE3e.</p></div><h5 id="invocando-o-metodo-reescrito" tabindex="-1"><a class="header-anchor" href="#invocando-o-metodo-reescrito" aria-hidden="true">#</a> Invocando o m\xE9todo reescrito</h5><p>Depois de reescrito, n\xE3o podemos mais chamar o m\xE9todo antigo que fora herdado da classe m\xE3e: realmente alteramos o seu comportamento. Mas podemos invoc\xE1-lo no caso de estarmos dentro da classe.</p><p>Imagine que para calcular a bonifica\xE7\xE3o de um Gerente devemos fazer igual ao c\xE1lculo de um <code>Funcionario</code> porem adicionando R$ 1000. Poder\xEDamos fazer assim:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Gerente</span> <span class="token keyword">extends</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> senha<span class="token punctuation">;</span>
    <span class="token keyword">int</span> numeroDeFuncionariosGerenciados<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBonificacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>salario <span class="token operator">*</span> <span class="token number">0.10</span> <span class="token operator">+</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Aqui ter\xEDamos um problema: o dia que o <code>getBonificacao</code> do <code>Funcionario</code> mudar, precisaremos mudar o m\xE9todo do <code>Gerente</code> para acompanhar a nova bonifica\xE7\xE3o. Para evitar isso, o <code>getBonificacao</code> do <code>Gerente</code> pode chamar o do <code>Funcionario</code> utilizando a palavra chave <strong>super</strong>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Gerente</span> <span class="token keyword">extends</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> senha<span class="token punctuation">;</span>
    <span class="token keyword">int</span> numeroDeFuncionariosGerenciados<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBonificacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getBonificacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Essa invoca\xE7\xE3o vai procurar o m\xE9todo com o nome <code>getBonificacao</code> de uma super classe de <code>Gerente</code>. No caso ele logo vai encontrar esse m\xE9todo em <code>Funcionario</code>.</p><p>Essa \xE9 uma pr\xE1tica comum, pois muitos casos o m\xE9todo reescrito geralmente faz &quot;algo a mais&quot; que o m\xE9todo da classe m\xE3e. Chamar ou n\xE3o o m\xE9todo de cima \xE9 uma decis\xE3o sua e depende do seu problema. Algumas vezes n\xE3o faz sentido invocar o m\xE9todo que reescrevemos.</p><h4 id="k19-1" tabindex="-1"><a class="header-anchor" href="#k19-1" aria-hidden="true">#</a> K19</h4><p><sup class="footnote-ref"><a href="#footnote3">[3:1]</a><a class="footnote-anchor" id="footnote-ref3:1"></a></sup></p><p>Suponha que o valor da taxa administrativa do servi\xE7o de empr\xE9stimo \xE9 diferente dos outros servi\xE7os, pois ele \xE9 calculado a partir do valor emprestado ao cliente. Como esta l\xF3gica \xE9 espec\xEDfica para o servi\xE7o de empr\xE9stimo, devemos acrescentar um m\xE9todo para implementar esse c\xE1lculo na classe <code>Emprestimo</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Emprestimo</span> <span class="token keyword">extends</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
    <span class="token comment">// ATRIBUTOS</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculaTaxaDeEmprestimo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>valor <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Para os objetos da classe <code>Emprestimo</code>, devemos chamar o m\xE9todo <code>calculaTaxaDeEmprestimo()</code>. Para todos os outros servi\xE7os, devemos chamar o m\xE9todo <code>calculaTaxa()</code>.</p><p>Mesmo assim, nada impediria que o m\xE9todo <code>calculaTaxa()</code> fosse chamado em um objeto da classe <code>Emprestimo</code>, pois ela herda esse m\xE9todo da classe <code>Servico</code>. Dessa forma, existe o risco de algu\xE9m erroneamente chamar o m\xE9todo incorreto.</p><p>Seria mais seguro &quot;substituir&quot; a implementa\xE7\xE3o do m\xE9todo <code>calculaTaxa()</code> herdado da classe <code>Servico</code> na classe <code>Emprestimo</code>. Para isso, basta escrever o m\xE9todo <code>calculaTaxa()</code> tamb\xE9m na classe <code>Emprestimo</code> com a mesma assinatura que ele possui na classe <code>Servico</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Emprestimo</span> <span class="token keyword">extends</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
    <span class="token comment">// ATRIBUTOS</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculaTaxa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>valor <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Os m\xE9todos das classes espec\xEDficas t\xEAm prioridade sobre os m\xE9todos das classes gen\xE9ricas. Em outras palavras, se o m\xE9todo chamado existe na classe filha ele ser\xE1 chamado, caso contr\xE1rio o m\xE9todo ser\xE1 procurado na classe m\xE3e.</p><p>Quando definimos um m\xE9todo com a mesma assinatura na classe base e em alguma classe derivada, estamos aplicando o conceito de Reescrita de M\xE9todo.</p><h5 id="fixo-especifico" tabindex="-1"><a class="header-anchor" href="#fixo-especifico" aria-hidden="true">#</a> Fixo + Espec\xEDfico</h5><p>Suponha que o pre\xE7o de um servi\xE7o \xE9 a soma de um valor fixo mais um valor que depende do tipo do servi\xE7o. Por exemplo, o pre\xE7o do servi\xE7o de empr\xE9stimo \xE9 5 reais mais uma porcentagem do valor emprestado ao cliente. O pre\xE7o do servi\xE7o de seguro de ve\xEDculo \xE9 5 reais mais uma porcentagem do valor do ve\xEDculo segurado. Em cada classe espec\xEDfica, podemos reescrever o m\xE9todo <code>calculaTaxa()</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Emprestimo</span> <span class="token keyword">extends</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
    <span class="token comment">// ATRIBUTOS</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculaTaxa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>valor <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">SeguraDeVeiculo</span> <span class="token keyword">extends</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
<span class="token comment">// ATRIBUTOS</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculaTaxa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>veiculo<span class="token punctuation">.</span><span class="token function">getTaxa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token number">0.05</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Se o valor fixo dos servi\xE7os for atualizado, todas as classes espec\xEDficas devem ser modificadas. Outra alternativa seria criar um m\xE9todo na classe <code>Servico</code> para calcular o valor fixo de todos os servi\xE7os e cham\xE1-lo dos m\xE9todos reescritos nas classes espec\xEDficas.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculaTaxa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">5</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Emprestimo</span> <span class="token keyword">extends</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
<span class="token comment">// ATRIBUTOS</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculaTaxa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">calculaTaxa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>valor <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dessa forma, quando o valor padr\xE3o do pre\xE7o dos servi\xE7os \xE9 alterado, basta modificar o m\xE9todo na classe <code>Servico</code>.</p><h3 id="construtores-e-heranca" tabindex="-1"><a class="header-anchor" href="#construtores-e-heranca" aria-hidden="true">#</a> Construtores e Heran\xE7a</h3><p>Quando temos uma hierarquia de classes, as chamadas dos construtores s\xE3o mais complexas do que o normal. Pelo menos um construtor de cada classe de uma mesma sequ\xEAncia hier\xE1rquica deve ser chamado ao instanciar um objeto. Por exemplo, quando um objeto da classe Emprestimo \xE9 criado, pelo menos um construtor da pr\xF3pria classe Emprestimo e um da classe Servico devem ser executados. Al\xE9m disso, os construtores das classes mais gen\xE9ricas s\xE3o chamados antes dos construtores das classes espec\xEDficas.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
    <span class="token comment">// ATRIBUTOS</span>
    <span class="token keyword">public</span> <span class="token class-name">Servico</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Servico&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Emprestimo</span> <span class="token keyword">extends</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
    <span class="token comment">// ATRIBUTOS</span>
    <span class="token keyword">public</span> <span class="token class-name">Emprestimo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Emprestimo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Por padr\xE3o, todo construtor chama o construtor sem argumentos da classe m\xE3e se n\xE3o existir nenhuma chamada de construtor expl\xEDcita.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">TesteConstrutor</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Emprestimo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><div class="multicolumn"><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0iHIuWbEBoZAJynLiQdHr5Lnp2ufIYqioS_CLk1nIyrB0QY4q0000" alt="uml diagram" loading="lazy"><img src="https://www.plantuml.com/plantuml/svg/RL112i903Bpd5Q4dFTW7ACY2-8A-ODsckD3Tb3HTzVUkrjAbUCfaCZC9CQDQqIdqO1Q4SFSjOSUiDtw2TSg2bzv79G0dP9Nm6WQXKNrWc2TuE1Sa7Z7IusFrQIC7A6JPr90axnX1g4DE90i3YCrhL0erJreFahVqSLVzfjN-11HRpAvDOD6jcSK1_sDNGPbiClZ-Pgvl" alt="uml diagram" loading="lazy"></div><figcaption>Execu\xE7\xE3o do construtor com Heran\xE7a</figcaption></figure><h2 id="polimorfismo" tabindex="-1"><a class="header-anchor" href="#polimorfismo" aria-hidden="true">#</a> Polimorfismo</h2><ul><li>\xC9 a possibilidade de se solicitar um servi\xE7o a um objeto, cuja execu\xE7\xE3o vai depender do tipo de objeto instanciado</li></ul><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuU9oW3EJSnABYnNSCjDBYnAhkHI082MrE3Kl8x58GvEh5Yhjd5cKN9gJZrC-ABKaCIyTduh0qiIKeiGKR0eWTYlOrEZgmYn24OCRZY8ACv3B8JKl1UGHA0q0" alt="uml diagram" loading="lazy"><figcaption>UML da rela\xE7\xE3o entre Figura, Circulo, Retangulo e Quadrado.</figcaption></figure><ul><li><p><code>C\xEDrculo</code>, <code>Retangulo</code> e <code>Quadrado</code> s\xE3o do tipo <code>Figura</code>.</p><ul><li>M\xE9todo desenhar()</li></ul></li><li><p>O resultado depende do tipo de figura que receber a mensagem</p></li><li><p>O polimorfismo permite escrever programas que processam objetos que compartilham a mesma superclasse em uma hierarquia de classe como se todas fossem objetos da superclasse.</p></li><li><p>Sistema de simula\xE7\xE3o de movimento de Animais</p></li></ul><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0iv9p4ekB5HppCdCJSwgv580W83-l95yXCoypEJCVII0jCnVCoyqlIotIqEIgXMeDICsiIAt6AkMObvQPb9cFNJ80I2GMOKX2NA9WKwEh2p4QHGHg8gegY45S3gbvAM2_GMW0" alt="uml diagram" loading="lazy"><figcaption>UML da rela\xE7\xE3o entre Animal, Peixe, Anf\xEDbio e P\xE1ssaro.</figcaption></figure><ul><li>Peixes, Anf\xEDbios, P\xE1ssaros <ul><li>Superclasse Animal <ul><li>M\xE9todo mover</li><li>Localiza\xE7\xE3o x,y</li></ul></li><li>Todas as subclasses implementam o m\xE9todo mover</li></ul></li><li>O programa envia a mensagem &quot;mover&quot; para os 3 objetos</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//...</span>
<span class="token class-name">Animal</span> animal<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//...</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    animal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">mover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//como ser\xE1 o movimento desse animal?</span>
<span class="token punctuation">}</span>
<span class="token comment">//...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Cada animal responde ao m\xE9todo mover de uma maneira diferente <ul><li>O peixe pode nadar 2 metros</li><li>Anf\xEDbio pular 1 metro</li><li>P\xE1ssaro voar 3 metros</li></ul></li><li>Cada objeto ir\xE1 responder a mensagem &quot;mover&quot; de acordo com sua instancia</li><li>Apesar de todos serem Animais o fato do m\xE9todo &quot;mover&quot; ter &quot;muitas formas&quot; \xE9 a chave do polimorfismo <ul><li>Polimorfismo vem de Polimorfo, &quot;Que \xE9 sujeito a mudar de forma&quot;</li></ul></li></ul><div class="custom-container tip"><p class="custom-container-title">Defini\xE7\xE3o</p><p>Polimorfismo possibilita tratar objetos de tipos mais especializados de forma gen\xE9rica</p></div><h3 id="caelum-2" tabindex="-1"><a class="header-anchor" href="#caelum-2" aria-hidden="true">#</a> Caelum</h3><p><sup class="footnote-ref"><a href="#footnote2">[2:2]</a><a class="footnote-anchor" id="footnote-ref2:2"></a></sup></p><p>O que guarda uma vari\xE1vel do tipo <code>Funcionario</code>? Uma refer\xEAncia para um <code>Funcionario</code>, nunca o objeto em si.</p><p>Na heran\xE7a, vimos que todo <code>Gerente</code> <strong>\xE9 um</strong> <code>Funcionario</code>, pois \xE9 uma extens\xE3o deste. Podemos nos referir a um <code>Gerente</code> como sendo um <code>Funcionario</code>. Se algu\xE9m precisa falar com um <code>Funcionario</code> do banco, pode falar com um <code>Gerente</code>! Porque? Pois <code>Gerente</code> <strong>\xE9 um</strong> <code>Funcionario</code>. Essa \xE9 a sem\xE2ntica da heran\xE7a.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Gerente</span> gerente <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gerente</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Funcionario</span> funcionario <span class="token operator">=</span> gerente<span class="token punctuation">;</span>
funcionario<span class="token punctuation">.</span><span class="token function">setSalario</span><span class="token punctuation">(</span><span class="token number">5000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://www.plantuml.com/plantuml/svg/LL2x4W8X3Epv2aej_0Nd2aShAql78WSvP0OIXqVb-EzYxlGm1MINPBDXo0LIgJ6euPjfbT0K81TGdp5oyl1KkeM1PBN3X5Hm9QPAnZD1ygoKqE1QnN9UXJbrJRiMabnAykGqSSGUcySaq78TcuCCGQG_b6-26UaEFqGrOk837bSJMOOP3vRp_y2HEI2GXbgQ6szWynFSIi5jzh-is1htynR2TdjsB-gb1YGh7pZVRm00" alt="uml diagram" loading="lazy"><figcaption>Representa\xE7\xE3o da mem\xF3ria de duas vari\xE1veis para a mesmo refer\xEAncia.</figcaption></figure><p>Polimorfismo \xE9 a capacidade de um objeto poder ser referenciado de v\xE1rias formas. (cuidado, polimorfismo n\xE3o quer dizer que o objeto fica se transformando, muito pelo contr\xE1rio, um objeto nasce de um tipo e morre daquele tipo, o que pode mudar \xE9 a maneira como nos referimos a ele).</p><p>At\xE9 aqui tudo bem, mas e se eu tentar:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>funcionario<span class="token punctuation">.</span><span class="token function">getBonificacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Qual \xE9 o retorno desse m\xE9todo? <code>500</code> ou <code>750</code>? No Java, a invoca\xE7\xE3o de m\xE9todo sempre vai ser <strong>decidida em tempo de execu\xE7\xE3o</strong>. O Java vai procurar o objeto na mem\xF3ria e, a\xED sim, decidir qual m\xE9todo deve ser chamado, sempre relacionando com sua classe de verdade, e n\xE3o com a que estamos usando para referenci\xE1-lo. Apesar de estarmos nos referenciando a esse <code>Gerente</code> como sendo um <code>Funcionario</code>, o m\xE9todo executado \xE9 o do <code>Gerente</code>. O retorno \xE9 <code>750</code>.</p><p>Parece estranho criar um gerente e referenci\xE1-lo como apenas um funcion\xE1rio. Por que far\xEDamos isso? Na verdade, a situa\xE7\xE3o que costuma aparecer \xE9 a que temos um m\xE9todo que recebe um argumento do tipo <code>Funcionario</code>:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ControleDeBonificacoes</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> totalDeBonificacoes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registra</span><span class="token punctuation">(</span><span class="token class-name">Funcionario</span> funcionario<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>totalDeBonificacoes <span class="token operator">+=</span> funcionario<span class="token punctuation">.</span><span class="token function">getBonificacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getTotalDeBonificacoes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>totalDeBonificacoes<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>E, em algum lugar da minha aplica\xE7\xE3o (ou no main, se for apenas para testes):</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ControleDeBonificacoes</span> controle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ControleDeBonificacoes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Gerente</span> funcionario1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gerente</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

funcionario1<span class="token punctuation">.</span><span class="token function">setSalario</span><span class="token punctuation">(</span><span class="token number">5000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
controle<span class="token punctuation">.</span><span class="token function">registra</span><span class="token punctuation">(</span>funcionario1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Funcionario</span> funcionario2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Funcionario</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
funcionario2<span class="token punctuation">.</span><span class="token function">setSalario</span><span class="token punctuation">(</span><span class="token number">1000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
controle<span class="token punctuation">.</span><span class="token function">registra</span><span class="token punctuation">(</span>funcionario2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>controle<span class="token punctuation">.</span><span class="token function">getTotalDeBonificacoes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Perceba que conseguimos passar um <code>Gerente</code> para um m\xE9todo que recebe um <code>Funcionario</code> como argumento. Pense como numa porta na ag\xEAncia banc\xE1ria com o seguinte aviso: &quot;\u201CPermitida a entrada apenas de Funcion\xE1rios\u201D&quot;. Um gerente pode passar nessa porta? Sim, pois <code>Gerente</code> <strong>\xE9 um</strong> <code>Funcionario</code>.</p><p>Qual ser\xE1 o valor resultante? N\xE3o importa que dentro do m\xE9todo registra do <code>ControleDeBonificacoes</code> receba <code>Funcionario</code>. Quando ele receber um objeto que realmente \xE9 um <code>Gerente</code>, o seu m\xE9todo reescrito ser\xE1 invocado. Reafirmando: n\xE3o importa como nos referenciamos a um objeto, o m\xE9todo que ser\xE1 invocado \xE9 sempre o que \xE9 dele.</p><p>No dia em que criarmos uma classe <code>Secretaria</code>, por exemplo, que \xE9 filha de <code>Funcionario</code>, precisaremos mudar a classe de <code>ControleDeBonificacoes</code>? N\xE3o. Basta a classe <code>Secretaria</code> reescrever os m\xE9todos que lhe parecerem necess\xE1rios. \xC9 exatamente esse o poder do polimorfismo, juntamente com a reescrita de m\xE9todo: diminuir o acoplamento entre as classes, para evitar que novos c\xF3digos resultem em modifica\xE7\xF5es em in\xFAmeros lugares.</p><p>Perceba que quem criou <code>ControleDeBonificacoes</code> pode nunca ter imaginado a cria\xE7\xE3o da classe <code>Secretaria</code> ou <code>Engenheiro</code>. Contudo, n\xE3o ser\xE1 necess\xE1rio reimplementar esse controle em cada nova classe: reaproveitamos aquele c\xF3digo</p><div class="custom-container warning"><p class="custom-container-title">Heran\xE7a versus acoplamento</p><p>Note que o uso de heran\xE7a aumenta o acoplamento entre as classes, isto \xE9, o quanto uma classe depende de outra. A rela\xE7\xE3o entre classe m\xE3e e filha \xE9 muito forte e isso acaba fazendo com que o programador das classes filhas tenha que conhecer a implementa\xE7\xE3o da classe pai e vice-versa. Fica dif\xEDcil fazer uma mudan\xE7a pontual no sistema.</p><p>Por exemplo, imagine se tivermos que mudar algo na nossa classe Funcionario, mas n\xE3o quis\xE9ssemos que todos os funcion\xE1rios sofressem a mesma mudan\xE7a. Precisar\xEDamos passar por cada uma das filhas de Funcionario verificando se ela se comporta como deveria ou se devemos sobrescrever o tal m\xE9todo modificado.</p><p>Esse \xE9 um problema da heran\xE7a, e n\xE3o do polimorfismo, que resolveremos mais tarde com a ajuda de Interfaces.</p></div><h4 id="um-outro-exemplo" tabindex="-1"><a class="header-anchor" href="#um-outro-exemplo" aria-hidden="true">#</a> Um outro exemplo</h4><p>Imagine que vamos modelar um sistema para a faculdade que controle as despesas com funcion\xE1rios e professores. Nosso funcion\xE1rio fica assim:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">EmpregadoDaFaculdade</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> nome<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> salario<span class="token punctuation">;</span>
    <span class="token keyword">double</span> <span class="token function">getGastos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>salario<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;nome: &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nome <span class="token operator">+</span> <span class="token string">&quot; com sal\xE1rio &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>salario<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// m\xE9todos de get, set e outros</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>O gasto que temos com o professor n\xE3o \xE9 apenas seu sal\xE1rio. Temos de somar um b\xF4nus de 10 reais por hora/aula. O que fazemos ent\xE3o? Reescrevemos o m\xE9todo. Assim como o <code>getGastos</code> \xE9 diferente, o <code>getInfo</code> tamb\xE9m ser\xE1, pois temos de mostrar as horas/aula tamb\xE9m.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ProfessorDaFaculdade</span> <span class="token keyword">extends</span> <span class="token class-name">EmpregadoDaFaculdade</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> horasDeAula<span class="token punctuation">;</span>
    <span class="token keyword">double</span> <span class="token function">getGastos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSalario</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>horasDeAula <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> informacaoBasica <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> informacao <span class="token operator">=</span> informacaoBasica <span class="token operator">+</span> <span class="token string">&quot; horas de aula: &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>horasDeAula<span class="token punctuation">;</span>
        <span class="token keyword">return</span> informacao<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// m\xE9todos de get, set e outros que forem necess\xE1rios</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A novidade, aqui, \xE9 a palavra chave super. Apesar do m\xE9todo ter sido reescrito, gostar\xEDamos de acessar o m\xE9todo da classe m\xE3e, para n\xE3o ter de copiar e colocar o conte\xFAdo desse m\xE9todo e depois concatenar com a informa\xE7\xE3o das horas de aula.</p><p>Como tiramos proveito do polimorfismo? Imagine que temos uma classe de relat\xF3rio:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">GeradorDeRelatorio</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">adiciona</span><span class="token punctuation">(</span><span class="token class-name">EmpregadoDaFaculdade</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getGastos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Podemos passar para nossa classe qualquer <code>EmpregadoDaFaculdade</code>! Vai funcionar tanto para professor, quanto para outros funcion\xE1rios.</p><p>Um certo dia, muito depois de terminar essa classe de relat\xF3rio, resolvemos aumentar nosso sistema, e colocar uma classe nova, que representa o <code>Reitor</code>. Como ele tamb\xE9m \xE9 um <code>EmpregadoDaFaculdade</code>, ser\xE1 que vamos precisar alterar algo na nossa classe de <code>Relatorio</code>? N\xE3o. Essa \xE9 a ideia! Quem programou a classe <code>GeradorDeRelatorio</code> nunca imaginou que existiria uma classe <code>Reitor</code> e, mesmo assim, o sistema funciona.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Reitor</span> <span class="token keyword">extends</span> <span class="token class-name">EmpregadoDaFaculdade</span> <span class="token punctuation">{</span>
    <span class="token comment">// informa\xE7\xF5es extras</span>
    <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; e ele \xE9 um reitor&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// n\xE3o sobrescrevemos o getGastos!!!</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="k19-2" tabindex="-1"><a class="header-anchor" href="#k19-2" aria-hidden="true">#</a> K19</h3><p><sup class="footnote-ref"><a href="#footnote3">[3:2]</a><a class="footnote-anchor" id="footnote-ref3:2"></a></sup></p><h4 id="controle-de-ponto" tabindex="-1"><a class="header-anchor" href="#controle-de-ponto" aria-hidden="true">#</a> Controle de Ponto</h4><p>O sistema do banco deve possuir um controle de ponto para registrar a entrada e sa\xEDda dos funcion\xE1rios. O pagamento dos funcion\xE1rios depende dessas informa\xE7\xF5es. Podemos definir uma classe para implementar o funcionamento de um rel\xF3gio de ponto.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ControleDePonto</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registraEntrada</span><span class="token punctuation">(</span><span class="token class-name">Gerente</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;dd/MM/ yyyy HH:mm:ss&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token class-name">Date</span> agora <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ENTRADA:&quot;</span><span class="token operator">+</span>g<span class="token punctuation">.</span><span class="token function">getCodigo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;DATA:&quot;</span><span class="token operator">+</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>agora<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registraSaida</span><span class="token punctuation">(</span><span class="token class-name">Gerente</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;dd/MM/ yyyy HH:mm:ss&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token class-name">Date</span> agora <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;SA\xCDDA:&quot;</span><span class="token operator">+</span>g<span class="token punctuation">.</span><span class="token function">getCodigo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;DATA:&quot;</span><span class="token operator">+</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>agora<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A classe acima possui dois m\xE9todos: o primeiro para registrar a entrada e o segundo para registrar a sa\xEDda dos gerentes do banco. Contudo, esses dois m\xE9todos n\xE3o s\xE3o aplic\xE1veis aos outros tipos de funcion\xE1rios.</p><p>Seguindo essa abordagem, a classe <code>ControleDePonto</code> precisaria de um par de m\xE9todos para cada cargo. Ent\xE3o, a quantidade de m\xE9todos dessa classe seria igual a quantidade de cargos multiplicada por dois. Imagine que no banco exista 30 cargos distintos. Ter\xEDamos 60 m\xE9todos na classe <code>ControleDePonto</code>.</p><p>Os procedimentos de registro de entrada e sa\xEDda s\xE3o id\xEAnticos para todos os funcion\xE1rios. Consequentemente, qualquer altera\xE7\xE3o na l\xF3gica desses procedimentos implicaria na modifica\xE7\xE3o de todos os m\xE9todos da classe <code>ControleDePonto</code>.</p><p>Al\xE9m disso, se o banco definir um novo tipo de funcion\xE1rio, dois novos m\xE9todos praticamente id\xEAnticos aos que j\xE1 existem teriam de ser adicionados na classe <code>ControleDePonto</code>. Analogamente, se um cargo deixar de existir, os dois m\xE9todos correspondentes da classe <code>ControleDePonto</code> dever\xE3o ser retirados.</p><h4 id="modelagem-dos-funcionarios" tabindex="-1"><a class="header-anchor" href="#modelagem-dos-funcionarios" aria-hidden="true">#</a> Modelagem dos funcion\xE1rios</h4><p>Com o intuito inicial de reutilizar c\xF3digo, podemos modelar os diversos tipos de funcion\xE1rios do banco utilizando o conceito de heran\xE7a.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> codigo <span class="token punctuation">;</span>
    <span class="token comment">// GETTERS AND SETTERS</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Gerente</span> <span class="token keyword">extends</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> usuario <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> senha <span class="token punctuation">;</span>
    <span class="token comment">// GETTERS AND SETTERS</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Telefonista</span> <span class="token keyword">extends</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> ramal <span class="token punctuation">;</span>
    <span class="token comment">// GETTERS AND SETTERS</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="e-um-extends" tabindex="-1"><a class="header-anchor" href="#e-um-extends" aria-hidden="true">#</a> \xC9 UM (extends)</h5><p>Al\xE9m de gerar reaproveitamento de c\xF3digo, a utiliza\xE7\xE3o de heran\xE7a permite que objetos criados a partir das classes espec\xEDficas sejam tratados como objetos da classe gen\xE9rica.</p><p>Em outras palavras, a heran\xE7a entre as classes que modelam os funcion\xE1rios permite que objetos criados a partir das classes <code>Gerente</code> ou <code>Telefonista</code> sejam tratados como objetos da classe <code>Funcionario</code>.</p><p>No c\xF3digo da classe <code>Gerente</code> utilizamos a palavra <strong>extends</strong>. Ela pode ser interpretada como a express\xE3o: <strong>\xC9 UM</strong> ou <strong>\xC9 UMA</strong>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Gerente</span> <span class="token keyword">extends</span> <span class="token class-name">Funcionario</span>
<span class="token comment">// TODO Gerente \xC9 UM Funcionario</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Como est\xE1 expl\xEDcito no c\xF3digo que todo gerente \xE9 um funcion\xE1rio ent\xE3o podemos criar um objeto da classe <code>Gerente</code> e trat\xE1-lo como um objeto da classe <code>Funcionario</code> tamb\xE9m.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// Criando um objeto da classe Gerente</span>
<span class="token class-name">Gerente</span> g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gerente</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Tratando um gerente como um objeto da classe Funcionario</span>
<span class="token class-name">Funcionario</span> f <span class="token operator">=</span> g <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Em alguns lugares do sistema do banco ser\xE1 mais vantajoso tratar um objeto da classe <code>Gerente</code> como um objeto da classe <code>Funcionario</code>.</p><h5 id="melhorando-o-controle-de-ponto" tabindex="-1"><a class="header-anchor" href="#melhorando-o-controle-de-ponto" aria-hidden="true">#</a> Melhorando o controle de ponto</h5><p>O registro da entrada ou sa\xEDda n\xE3o depende do cargo do funcion\xE1rio. N\xE3o faz sentido criar um m\xE9todo que registre a entrada para cada tipo de funcion\xE1rio, pois eles ser\xE3o sempre id\xEAnticos. Analogamente, n\xE3o faz sentido criar um m\xE9todo que registre a sa\xEDda para cada tipo de funcion\xE1rio.</p><p>Dado que podemos tratar os objetos das classes derivadas de <code>Funcionario</code> como sendo objetos dessa classe, podemos implementar um m\xE9todo que seja capaz de registrar a entrada de qualquer funcion\xE1rio independentemente do cargo. Analogamente, podemos fazer o mesmo para o procedimento de sa\xEDda.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ControleDePonto</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registraEntrada</span><span class="token punctuation">(</span><span class="token class-name">Funcionario</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;dd/MM/ yyyy HH:mm:ss&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token class-name">Date</span> agora <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ENTRADA:&quot;</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">getCodigo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;DATA:&quot;</span><span class="token operator">+</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>agora<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registraSaida</span><span class="token punctuation">(</span><span class="token class-name">Funcionario</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;dd/MM/ yyyy HH:mm:ss&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token class-name">Date</span> agora <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;SA\xCDDA:&quot;</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">getCodigo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;DATA:&quot;</span><span class="token operator">+</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>agora<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Os m\xE9todos <code>registraEntrada()</code> e <code>registraSaida()</code> recebem refer\xEAncias de objetos da classe <code>Funcionario</code> como par\xE2metro. Consequentemente, podem receber refer\xEAncias de objetos de qualquer classe que deriva direta ou indiretamente da classe Funcionario.</p><p>A capacidade de tratar objetos criados a partir das classes espec\xEDficas como objetos de uma classe gen\xE9rica \xE9 chamada de polimorfismo.</p><p>Aplicando a ideia do polimorfismo no controle de ponto, facilitamos a manuten\xE7\xE3o da classe <code>ControleDePonto</code>. Qualquer altera\xE7\xE3o no procedimento de entrada ou sa\xEDda implica em altera\xE7\xF5es em m\xE9todos \xFAnicos.</p><p>Al\xE9m disso, novos tipos de funcion\xE1rios podem ser definidos sem a necessidade de qualquer altera\xE7\xE3o na classe <code>ControleDePonto</code>. Analogamente, se algum cargo deixar de existir, nada precisar\xE1 ser modificado na classe <code>ControleDePonto</code>.</p><h2 id="classes-abstratas" tabindex="-1"><a class="header-anchor" href="#classes-abstratas" aria-hidden="true">#</a> Classes Abstratas</h2><ul><li>Classes abstratas s\xE3o classes que n\xE3o produzem inst\xE2ncias. Elas agrupam caracter\xEDsticas e comportamentos que ser\xE3o herdados por outras classes</li><li>Fornecem padr\xF5es de comportamento que ser\xE3o implementados nas suas subclasses</li><li>Podem ter m\xE9todos com implementa\xE7\xE3o definida</li><li>N\xE3o pode ser instanciada diretamente (<code>new</code>).</li><li>Uma classe abstrata possui caracter\xEDsticas que devem ser implementadas por classes filhas</li><li>Os m\xE9todos abstratos s\xE3o obrigatoriamente implementados pelas classes filhas concretas, quando a mesma herda de uma classe abstrata.</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pessoa</span> <span class="token punctuation">{</span> 
    <span class="token keyword">int</span> matricula<span class="token punctuation">;</span> 
    <span class="token class-name">String</span> nome<span class="token punctuation">;</span> 
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">estacionar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entrar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Entrando na Faculdade&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Aluno</span> <span class="token keyword">extends</span> <span class="token class-name">Pessoa</span> <span class="token punctuation">{</span> 
    <span class="token keyword">double</span> media<span class="token punctuation">;</span> 

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">estacionar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Estacionando na \xE1rea para estudante...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Professor</span> <span class="token keyword">extends</span> <span class="token class-name">Pessoa</span> <span class="token punctuation">{</span> 
    <span class="token keyword">double</span> salario<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">estacionar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Estacionando nas vagas de professor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://www.plantuml.com/plantuml/svg/XP1D2W8n38NtFKMMYdY2sOmt6F04cJPAeKqWRKKOvkxJSNvGHEmcpUlBzqBRb55pYS6q-yq0zYahsWmsO4hGKKg2C821UiwUCqJCwcq9sApYjVPy1vP8gtGQDim83_4Eg2POBunwE6wUvO6hRHRDMCENp4ieB43FJEo-Dd1I-a0GoNdy9Br7c15sNATocndw1vame7ffVZEDQUlywyUMEW40" alt="uml diagram" loading="lazy"><figcaption>UML Classe abstrata Pessoa e classes concretas Aluno e Professor.</figcaption></figure><h3 id="outros-exemplos-1" tabindex="-1"><a class="header-anchor" href="#outros-exemplos-1" aria-hidden="true">#</a> Outros Exemplos</h3><h4 id="caelum-3" tabindex="-1"><a class="header-anchor" href="#caelum-3" aria-hidden="true">#</a> Caelum</h4><p><sup class="footnote-ref"><a href="#footnote2">[2:3]</a><a class="footnote-anchor" id="footnote-ref2:3"></a></sup></p><p>Vamos recordar em como pode estar nossa classe <code>Funcionario</code>:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> nome<span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> cpf<span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">double</span> salario<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBonificacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>salario <span class="token operator">*</span> <span class="token number">1.2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// outros m\xE9todos aqui</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Considere o nosso <code>ControleDeBonificacao</code>:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ControleDeBonificacoes</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> totalDeBonificacoes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registra</span><span class="token punctuation">(</span><span class="token class-name">Funcionario</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Adicionando bonifica\xE7\xE3o do funcionario: &quot;</span> <span class="token operator">+</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>totalDeBonificacoes <span class="token operator">+=</span> f<span class="token punctuation">.</span><span class="token function">getBonificacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getTotalDeBonificacoes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>totalDeBonificacoes<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nosso m\xE9todo <code>registra</code> recebe qualquer refer\xEAncia do tipo <code>Funcionario</code>, isto \xE9, podem ser objetos do tipo <code>Funcionario</code> e qualquer de seus subtipos: <code>Gerente</code>, <code>Diretor</code> e, eventualmente, alguma nova subclasse que venha ser escrita, sem pr\xE9vio conhecimento do autor da <code>ControleDeBonificacao</code>.</p><p>Estamos utilizando aqui a classe <code>Funcionario</code> para o polimorfismo. Se n\xE3o fosse ela, ter\xEDamos um grande preju\xEDzo: precisar\xEDamos criar um m\xE9todo <code>registra</code> para receber cada um dos tipos de <code>Funcionario</code>, um para <code>Gerente</code>, um para <code>Diretor</code>, etc. Repare que perder esse poder \xE9 muito pior do que a pequena vantagem que a heran\xE7a traz em herdar c\xF3digo.</p><p>Por\xE9m, em alguns sistemas, como \xE9 o nosso caso, usamos uma classe com apenas esses intuitos: de economizar um pouco c\xF3digo e ganhar polimorsmo para criar m\xE9todos mais gen\xE9ricos, que se encaixem a diversos objetos.</p><p>Faz sentido ter uma refer\xEAncia do tipo <code>Funcionario</code>? Essa pergunta \xE9 diferente de saber se faz sentido ter um objeto do tipo <code>Funcionario:</code> nesse caso, faz sim e \xE9 muito \xFAtil.</p><p>Referenciando <code>Funcionario</code> temos o polimorfismo de refer\xEAncia, j\xE1 que podemos receber qualquer objeto que seja um <code>Funcionario</code>. Por\xE9m, dar <code>new</code> em <code>Funcionario</code> pode n\xE3o fazer sentido, isto \xE9, n\xE3o queremos receber um objeto do tipo <code>Funcionario</code>, mas sim que aquela refer\xEAncia seja ou um <code>Gerente</code>, ou um <code>Diretor</code>, etc. Algo mais <strong>concreto</strong> que um <code>Funcionario</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ControleDeBonificacoes</span> cdb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ControleDeBonificacoes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Funcionario</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Funcionario</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cdb<span class="token punctuation">.</span><span class="token function">adiciona</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// faz sentido?</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vejamos um outro caso em que n\xE3o faz sentido ter um objeto daquele tipo, apesar da classe existir: imagine a classe <code>Pessoa</code> e duas filhas, <code>PessoaFisica</code> e <code>PessoaJuridica</code>. Quando puxamos um relat\xF3rio de nossos clientes (uma <code>array</code> de <code>Pessoa</code> por exemplo), queremos que cada um deles seja ou uma <code>PessoaFisica</code>, ou uma <code>PessoaJuridica</code>. A classe <code>Pessoa</code>, nesse caso, estaria sendo usada apenas para ganhar o polimorfismo e herdar algumas coisas: n\xE3o faz sentido permitir instanci\xE1-la.</p><p>Para resolver esses problemas, temos as <em>classes abstratas</em>.</p><h5 id="classe-abstrata" tabindex="-1"><a class="header-anchor" href="#classe-abstrata" aria-hidden="true">#</a> Classe abstrata</h5><p>O que, exatamente, vem a ser a nossa classe <code>Funcionario</code>? Nossa empresa tem apenas Diretores, Gerentes, Secret\xE1rias, etc. Ela \xE9 uma classe que apenas idealiza um tipo, define apenas um rascunho.</p><p>Para o nosso sistema, \xE9 inadmiss\xEDvel que um objeto seja apenas do tipo <code>Funcionario</code> (pode existir um sistema em que fa\xE7a sentido ter objetos do tipo Funcionario ou apenas <code>Pessoa</code>, mas, no nosso caso, n\xE3o).</p><p>Usamos a palavra chave <em>abstract</em> para impedir que ela possa ser instanciada. Esse \xE9 o efeito direto de se usar o modificador <code>abstract</code> na declara\xE7\xE3o de uma classe:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">double</span> salario<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBonificacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>salario <span class="token operator">*</span> <span class="token number">1.2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// outros atributos e m\xE9todos comuns a todos Funcionarios</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>E, no meio de um c\xF3digo:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Funcionario</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Funcionario</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// n\xE3o compila!!!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>O c\xF3digo acima n\xE3o compila. O problema \xE9 instanciar a classe - criar refer\xEAncia, voc\xEA pode. Se ela n\xE3o pode ser instanciada, para que serve? Serve para o polimorfismo e heran\xE7a dos atributos e m\xE9todos, que s\xE3o recursos muito poderosos, como j\xE1 vimos.</p><p>Vamos ent\xE3o herdar dessa classe, reescrevendo o m\xE9todo <code>getBonificacao</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Gerente</span> <span class="token keyword">extends</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBonificacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>salario <span class="token operator">*</span> <span class="token number">1.4</span> <span class="token operator">+</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://www.plantuml.com/plantuml/svg/XOuz2e0m38NtdA97wI2wUeMqpH2eAIGfU7p5IYV1wVtmyNZH7DNxKI5E1vZC5RE7ND4ih5qoDq7b1gFPI4cS0frEKhw8NScu_40BAtdJIRop0F6EpwUX5m00" alt="uml diagram" loading="lazy"><figcaption>UML da classe abstrata Funcionario e das classes concretas Gerente, Presidente e Diretor.</figcaption></figure><p>Mas qual \xE9 a real vantagem de uma classe abstrata? Poder\xEDamos ter feito isto com uma heran\xE7a comum. Por enquanto, a \xFAnica diferen\xE7a \xE9 que n\xE3o podemos instanciar um objeto do tipo <code>Funcionario</code>, que j\xE1 \xE9 de grande valia, dando mais consist\xEAncia ao sistema.</p><p>Fique claro que a nossa decis\xE3o de transformar <code>Funcionario</code> em uma classe abstrata dependeu do nosso dom\xEDnio. Pode ser que, em um sistema com classes similares, fa\xE7a sentido que uma classe an\xE1loga a <code>Funcionario</code> seja concreta.</p><h5 id="metodos-abstratos" tabindex="-1"><a class="header-anchor" href="#metodos-abstratos" aria-hidden="true">#</a> M\xE9todos abstratos</h5><p>Se o m\xE9todo <code>getBonificacao</code> n\xE3o fosse reescrito, ele seria herdado da classe m\xE3e, fazendo com que devolvesse o sal\xE1rio mais 20%.</p><p>Levando em considera\xE7\xE3o que cada funcion\xE1rio em nosso sistema tem uma regra totalmente diferente para ser bonificado, faz algum sentido ter esse m\xE9todo na classe <code>Funcionario</code>? Ser\xE1 que existe uma bonifica\xE7\xE3o padr\xE3o para todo tipo de <code>Funcionario</code>? Parece que n\xE3o, cada classe filha ter\xE1 um m\xE9todo diferente de bonifica\xE7\xE3o pois, de acordo com nosso sistema, n\xE3o existe uma regra geral: queremos que cada pessoa que escreve a classe de um <code>Funcionario</code> diferente (subclasses de <code>Funcionario</code>) reescreva o m\xE9todo <code>getBonificacao</code> de acordo com as suas regras.</p><p>Poder\xEDamos, ent\xE3o, jogar fora esse m\xE9todo da classe <code>Funcionario</code>? O problema \xE9 que, se ele n\xE3o existisse, n\xE3o poder\xEDamos chamar o m\xE9todo apenas com uma refer\xEAncia a um <code>Funcionario</code>, pois ningu\xE9m garante que essa refer\xEAncia aponta para um objeto que possui esse m\xE9todo. Ser\xE1 que ent\xE3o devemos retornar um c\xF3digo, como um n\xFAmero negativo? Isso n\xE3o resolve o problema: se esquecermos de reescrever esse m\xE9todo, teremos dados errados sendo utilizados como b\xF4nus.</p><p>Existe um recurso em Java que, em uma classe abstrata, podemos escrever que determinado m\xE9todo ser\xE1 sempre escrito pelas classes filhas. Isto \xE9, um <strong>m\xE9todo abstrato</strong>.</p><p>Ele indica que todas as classes filhas (concretas, isto \xE9, que n\xE3o forem abstratas) devem reescrever esse m\xE9todo ou n\xE3o compilar\xE3o. \xC9 como se voc\xEA herdasse a responsabilidade de ter aquele m\xE9todo.</p><div class="custom-container tip"><p class="custom-container-title">Como declarar um m\xE9todo abstrato</p><p>\xC0s vezes, n\xE3o fica claro como declarar um m\xE9todo abstrato.</p><p>Basta escrever a palavra chave <em>abstract</em> na assinatura do mesmo e colocar um ponto e v\xEDrgula em vez de abre e fecha chaves!</p></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">getBonificacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// outros atributos e m\xE9todos</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="k19-3" tabindex="-1"><a class="header-anchor" href="#k19-3" aria-hidden="true">#</a> K19</h4><p><sup class="footnote-ref"><a href="#footnote3">[3:3]</a><a class="footnote-anchor" id="footnote-ref3:3"></a></sup></p><h5 id="classes-abstratas-1" tabindex="-1"><a class="header-anchor" href="#classes-abstratas-1" aria-hidden="true">#</a> Classes Abstratas</h5><p>No banco, todas as contas s\xE3o de um tipo espec\xEDfico. Por exemplo, conta poupan\xE7a, conta corrente ou conta sal\xE1rio. Essas contas poderiam ser modeladas atrav\xE9s das seguintes classes utilizando o conceito de heran\xE7a:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Conta</span> <span class="token punctuation">{</span>
    <span class="token comment">// Atributos</span>
    <span class="token comment">// Construtores</span>
    <span class="token comment">// M\xE9todos</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ContaPoupanca</span> <span class="token keyword">extends</span> <span class="token class-name">Conta</span> <span class="token punctuation">{</span>
    <span class="token comment">// Atributos</span>
    <span class="token comment">// Construtores</span>
    <span class="token comment">// M\xE9todos</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ContaCorrente</span> <span class="token keyword">extends</span> <span class="token class-name">Conta</span> <span class="token punctuation">{</span>
    <span class="token comment">// Atributos</span>
    <span class="token comment">// Construtores</span>
    <span class="token comment">// M\xE9todos</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Para cada conta do dom\xEDnio do banco devemos criar um objeto da classe correspondente ao tipo da conta. Por exemplo, se existe uma conta poupan\xE7a no dom\xEDnio do banco devemos criar um objeto da classe <code>ContaPoupanca</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ContaPoupanca</span> cp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContaPoupanca</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Faz sentido criar objetos da classe <code>ContaPoupanca</code> pois existem contas poupan\xE7a no dom\xEDnio do banco. Dizemos que a classe <code>ContaPoupanca</code> \xE9 uma classe concreta pois criaremos objetos a partir dela.</p><p>Por outro lado, a classe <code>Conta</code> n\xE3o define uma conta que de fato existe no dom\xEDnio do banco. Ela apenas serve como &quot;base&quot; para definir as contas concretos.</p><p>N\xE3o faz sentido criar um objeto da classe <code>Conta</code> pois estar\xEDamos instanciado um objeto que n\xE3o \xE9 suficiente para representar uma conta que perten\xE7a ao dom\xEDnio do banco. Mas, a princ\xEDpio, n\xE3o h\xE1 nada proibindo a cria\xE7\xE3o de objetos dessa classe. Para adicionar essa restri\xE7\xE3o no sistema, devemos tornar a classe <code>Conta</code> <strong>abstrata</strong>.</p><p>Uma classe concreta pode ser diretamente utilizada para instanciar objetos. Por outro lado, uma classe abstrata n\xE3o pode. Para definir uma classe abstrata, basta adicionar o modificador abstract.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Conta</span> <span class="token punctuation">{</span>
    <span class="token comment">// Atributos</span>
    <span class="token comment">// Construtores</span>
    <span class="token comment">// M\xE9todos</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Todo c\xF3digo que tenta criar um objeto de uma classe abstrata n\xE3o compila.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// Erro de compila\xE7\xE3o</span>
<span class="token class-name">Conta</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="metodos-abstratos-1" tabindex="-1"><a class="header-anchor" href="#metodos-abstratos-1" aria-hidden="true">#</a> M\xE9todos Abstratos</h5><p>Suponha que o banco ofere\xE7a extrato detalhado das contas e para cada tipo de conta as informa\xE7\xF5es e o formato desse extrato detalhado s\xE3o diferentes. Al\xE9m disso, a qualquer momento o banco pode mudar os dados e o formato do extrato detalhado de um dos tipos de conta.</p><p>Neste caso, parece n\xE3o fazer sentido ter um m\xE9todo na classe <code>Conta</code> para gerar extratos detalhados pois ele seria reescrito nas classes espec\xEDficas sem nem ser reaproveitado.</p><p>Poder\xEDamos, simplesmente, n\xE3o definir nenhum m\xE9todo para gerar extratos detalhados na classe <code>Conta</code>. Por\xE9m, n\xE3o haveria nenhuma garantia que as classes que derivam direta ou indiretamente da classe <code>Conta</code> implementem m\xE9todos para gerar extratos detalhados.</p><p>Mas, mesmo supondo que toda classe derivada implemente um m\xE9todo para gerar os extratos que desejamos, ainda n\xE3o haveria nenhuma garantia em rela\xE7\xE3o as assinaturas desses m\xE9todos. As classes derivadas poderiam definir m\xE9todos com nomes ou par\xE2metros diferentes. Isso prejudicaria a utiliza\xE7\xE3o dos objetos que representam as contas devido a falta de padroniza\xE7\xE3o das opera\xE7\xF5es.</p><p>Para garantir que toda classe concreta que deriva direta ou indiretamente da classe <code>Conta</code> tenha uma implementa\xE7\xE3o de m\xE9todo para gerar extratos detalhados e al\xE9m disso que uma mesma assinatura de m\xE9todo seja utilizada, devemos utilizar o conceito de m\xE9todos abstratos.</p><p>Na classe <code>Conta</code>, definimos um m\xE9todo abstrato para gerar extratos detalhados. Um m\xE9todo abstrato n\xE3o possui corpo (implementa\xE7\xE3o).</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Conta</span> <span class="token punctuation">{</span>
    <span class="token comment">// Atributos</span>
    <span class="token comment">// Construtores</span>
    <span class="token comment">// M\xE9todos</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">imprimeExtratoDetalhado</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As classes concretas que derivam direta ou indiretamente da classe Conta devem possuir uma implementa\xE7\xE3o para o m\xE9todo <code>imprimeExtratoDetalhado()</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ContaPoupanca</span> <span class="token keyword">extends</span> <span class="token class-name">Conta</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> diaDoAniversario <span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">imprimeExtratoDetalhado</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;EXTRATO DETALHADO DE CONTA POUPAN\xC7A&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span> <span class="token punctuation">(</span><span class="token string">&quot;dd/MM/yyyy HH:mm:ss&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token class-name">Date</span> agora <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;DATA:&quot;</span><span class="token operator">+</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>agora<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;SALDO:&quot;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSaldo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ANIVERS\xC1RIO:&quot;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>diaDoAniversario<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Se uma classe concreta derivada da classe <code>Conta</code> n\xE3o possuir uma implementa\xE7\xE3o do m\xE9todo <code>imprimeExtratoDetalhado()</code> ela n\xE3o compilar\xE1.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// ESSA CLASSE N\xC3O COMPILA</span>
<span class="token keyword">class</span> <span class="token class-name">ContaPoupanca</span> <span class="token keyword">extends</span> <span class="token class-name">Conta</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="interface" tabindex="-1"><a class="header-anchor" href="#interface" aria-hidden="true">#</a> Interface</h3><h5 id="padronizacao" tabindex="-1"><a class="header-anchor" href="#padronizacao" aria-hidden="true">#</a> Padroniza\xE7\xE3o</h5><p>No dia a dia, estamos acostumados a utilizar aparelhos que dependem de energia el\xE9trica. Esses aparelhos possuem um plugue que deve ser conectado a uma tomada para obter a energia necess\xE1ria.</p><p>Diversas empresas fabricam aparelhos el\xE9tricos com plugues. Analogamente, diversas empresas fabricam tomadas el\xE9tricas. Suponha que cada empresa decida por conta pr\xF3pria o formato dos plugues ou das tomadas que fabricar\xE1. Ter\xEDamos uma infinidade de tipos de plugues e tomadas que tornaria a utiliza\xE7\xE3o dos aparelhos el\xE9tricos uma experi\xEAncia extremamente desagrad\xE1vel.</p><p>Inclusive, essa falta de padr\xE3o pode gerar problemas de seguran\xE7a aos usu\xE1rios. Os formatos dos plugues ou das tomadas pode aumentar o risco de uma pessoa tomar um choque el\xE9trico.</p><p>Com o intuito de facilitar a utiliza\xE7\xE3o dos consumidores e aumentar a seguran\xE7a dos mesmos, o governo atrav\xE9s dos \xF3rg\xE3os respons\xE1veis estabelece padr\xF5es para os plugues e tomadas. Esses padr\xF5es estabelecem restri\xE7\xF5es que devem ser respeitadas pelos fabricantes dos aparelhos e das tomadas.</p><p>Em diversos contextos, padronizar pode trazer grandes benef\xEDcios. Inclusive, no desenvolvimento de aplica\xE7\xF5es. Mostraremos como a ideia de padroniza\xE7\xE3o pode ser contextualizada nos conceitos de orienta\xE7\xE3o a objetos.</p><h5 id="contratos" tabindex="-1"><a class="header-anchor" href="#contratos" aria-hidden="true">#</a> Contratos</h5><p>Num sistema orientado a objetos, os objetos interagem entre si atrav\xE9s de chamadas de m\xE9todos (troca de mensagens). Podemos dizer que os objetos se \u201Cencaixam\u201D atrav\xE9s dos m\xE9todos p\xFAblicos assim como um plugue se encaixa em uma tomada atrav\xE9s dos pinos.</p><p>Para os objetos de uma aplica\xE7\xE3o \u201Cconversarem\u201D entre si mais facilmente \xE9 importante padronizar o conjunto de m\xE9todos oferecidos por eles. Assim como os plugues encaixam nas tomadas mais facilmente gra\xE7as aos padr\xF5es definidos pelo governo.</p><p>Um padr\xE3o \xE9 definido atrav\xE9s de especifica\xE7\xF5es ou contratos. Nas aplica\xE7\xF5es orientadas a objetos, podemos criar um \u201Ccontrato\u201D para definir um determinado conjunto de m\xE9todos que deve ser implementado pelas classes que \u201Cassinarem\u201D este contrato. Em orienta\xE7\xE3o a objetos, um contrato \xE9 chamado de interface. Um interface \xE9 composta basicamente por m\xE9todos abstratos.</p><h5 id="exemplo" tabindex="-1"><a class="header-anchor" href="#exemplo" aria-hidden="true">#</a> Exemplo</h5><p>No sistema do banco, podemos definir uma interface (contrato) para padronizar as assinaturas dos m\xE9todos oferecidos pelos objetos que representam as contas do banco.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Conta</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> deposita <span class="token punctuation">(</span> <span class="token keyword">double</span> valor <span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">void</span> saca <span class="token punctuation">(</span> <span class="token keyword">double</span> valor <span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Os m\xE9todos de uma interface n\xE3o possuem corpo (implementa\xE7\xE3o) pois ser\xE3o implementados nas classes vinculadas a essa interface. Todos os m\xE9todos de uma interface devem ser p\xFAblicos e abstratos. Os modificadores public e <strong>abstract</strong> s\xE3o opcionais.</p><p>As classes que definem os diversos tipos de contas que existem no banco devem implementar (assinar) a interface Conta.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ContaPoupanca</span> <span class="token keyword">implements</span> <span class="token class-name">Conta</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> deposita <span class="token punctuation">(</span> <span class="token keyword">double</span> valor <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// implementacao</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> saca <span class="token punctuation">(</span> <span class="token keyword">double</span> valor <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// implementacao</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ContaCorrente</span> <span class="token keyword">implements</span> <span class="token class-name">Conta</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> deposita <span class="token punctuation">(</span> <span class="token keyword">double</span> valor <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// implementacao</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> saca <span class="token punctuation">(</span> <span class="token keyword">double</span> valor <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// implementacao</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As classes concretas que implementam uma interface s\xE3o obrigadas a possuir uma implementa\xE7\xE3o para cada m\xE9todo declarado na interface. Caso contr\xE1rio, ocorrer\xE1 um erro de compila\xE7\xE3o.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// Esta classe n\xE3o compila porque ela n\xE3o implementou o m\xE9todo saca ()</span>
<span class="token keyword">class</span> <span class="token class-name">ContaCorrente</span> <span class="token keyword">implements</span> <span class="token class-name">Conta</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> deposita <span class="token punctuation">(</span> <span class="token keyword">double</span> valor <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// implementacao</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A primeira vantagem de utilizar uma interface \xE9 a padroniza\xE7\xE3o das assinaturas dos m\xE9todos oferecidos por um determinado conjunto de classes. A segunda vantagem \xE9 garantir que determinadas classes implementem certos m\xE9todos.</p><h5 id="polimorfismo-1" tabindex="-1"><a class="header-anchor" href="#polimorfismo-1" aria-hidden="true">#</a> Polimorfismo</h5><p>Se uma classe implementa uma interface, podemos aplicar a ideia do polimorfismo assim como quando aplicamos heran\xE7a. Dessa forma, outra vantagem da utiliza\xE7\xE3o de interfaces \xE9 o ganho do polimorfismo.</p><p>Como exemplo, suponha que a classe ContaCorrente implemente a interface Conta. Podemos guardar a refer\xEAncia de um objeto do tipo ContaCorrente em uma vari\xE1vel do tipo Conta.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Conta</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContaCorrente</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Al\xE9m disso, podemos passar uma vari\xE1vel do tipo ContaCorrente para um m\xE9todo que o par\xE2metro seja do tipo Conta.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">GeradorDeExtrato</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> geraExtrato <span class="token punctuation">(</span> <span class="token class-name">Conta</span> c <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// implementa\xE7\xE3o</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">GeradorDeExtrato</span> g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GeradorDeExtrato</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ContaCorrente</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContaCorrente</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
g<span class="token punctuation">.</span><span class="token function">geraExtrato</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>O m\xE9todo <code>geraExtrato()</code> pode ser utilizado para objetos criados a partir de classes que implementam direta ou indiretamente a interface Conta.</p><h5 id="interface-e-heranca" tabindex="-1"><a class="header-anchor" href="#interface-e-heranca" aria-hidden="true">#</a> Interface e Heran\xE7a</h5><p>As vantagens e desvantagens entre interface e heran\xE7a, provavelmente, \xE9 um dos temas mais discutido nos blogs, f\xF3runs e revistas que abordam desenvolvimento de software orientado a objetos.</p><p>Muitas vezes, os debates sobre este assunto se estendem mais do que a pr\xF3pria import\xE2ncia desse t\xF3pico. Muitas pessoas se posicionam de forma radical defendendo a utiliza\xE7\xE3o de interfaces ao inv\xE9s de heran\xE7a em qualquer situa\xE7\xE3o.</p><p>Normalmente, esses debates s\xE3o direcionados na an\xE1lise do que \xE9 melhor para manuten\xE7\xE3o das aplica\xE7\xF5es: utilizar interfaces ou aplicar heran\xE7a.</p><p>A grosso modo, priorizar a utiliza\xE7\xE3o de interfaces permite que altera\xE7\xF5es pontuais em determinados trechos do c\xF3digo fonte sejam feitas mais facilmente pois diminui as ocorr\xEAncias de efeitos colaterais indesejados no resto da aplica\xE7\xE3o. Por outro lado, priorizar a utiliza\xE7\xE3o de heran\xE7a pode diminuir a quantidade de c\xF3digo escrito no in\xEDcio do desenvolvimento de um projeto.</p><p>Algumas pessoas prop\xF5em a utiliza\xE7\xE3o de interfaces juntamente com composi\xE7\xE3o para substituir totalmente o uso de heran\xE7a. De fato, esta \xE9 uma alternativa interessante pois possibilita que um trecho do c\xF3digo fonte de uma aplica\xE7\xE3o possa ser alterado sem causar efeito colateral no restante do sistema al\xE9m de permitir a reutiliza\xE7\xE3o de c\xF3digo mais facilmente.</p><p>Em Java, como n\xE3o h\xE1 heran\xE7a m\xFAltipla, muitas vezes, interfaces s\xE3o apresentadas como uma alternativa para obter um grau maior de polimorfismo.</p><p>Por exemplo, suponha duas \xE1rvores de heran\xE7a independentes</p><figure><img src="https://www.plantuml.com/plantuml/svg/RSzV2i0W20VWzvsYemI31diQx0JIP0ZDG0js_FsB2DQJ-kDJq6e2IVa8WwsT3w1gna382Skqe6e4HqeU39u9UUkJEGjjFLIKo-mfCWZ5aame3wWBVx7YdWMuETgQmTxH-y5NBm00" alt="uml diagram" loading="lazy"><figcaption>Duas \xE1rvores de heran\xE7a independentes.</figcaption></figure><p>Suponha que os gerentes e as empresas possam acessar o sistema do banco com um nome de usu\xE1rio e uma senha. Seria interessante utilizar um \xFAnico m\xE9todo para implementar a autentica\xE7\xE3o desses dois tipos de objetos. Mas, qual seria o tipo de par\xE2metro deste m\xE9todo? Lembrando que ele deve aceitar gerentes e empresas.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">AutenticadorDeUsuario</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> autentica <span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span> u <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// implementa\xE7\xE3o</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>De acordo com as \xE1rvores de heran\xE7a, n\xE3o h\xE1 polimorfismo entre objetos da classe Gerente e da classe Empresa. Para obter polimorfismo entre os objetos dessas duas classes somente com heran\xE7a, dever\xEDamos coloc\xE1-las na mesma \xE1rvore de heran\xE7a. Mas, isso n\xE3o faz sentido pois uma empresa n\xE3o \xE9 um funcion\xE1rio e o gerente n\xE3o \xE9 cliente. Neste caso, a solu\xE7\xE3o \xE9 utilizar interfaces para obter o polimorfismo desejado</p><figure><img src="https://www.plantuml.com/plantuml/svg/ROz12a8n34JtFKMFKX2-u4eG3n3wemJQL986FBwb_MeNNMKIPjwGe1MaMauk_5HCeEfFYP0h7jiLLGjif1J1uxiYxslBnOJsXSbJVYNCJQg_gu5GSKTmCuvKk9_6vOpICr_6v5XnHkY6JnFWgNe6Esf0UK34Vtrehlxwc1y0" alt="uml diagram" loading="lazy"><figcaption>Obtendo mais polimorfismo.</figcaption></figure><p>Agora, conseguimos definir o que o m\xE9todo autentica() deve receber como par\xE2metro para trabalhar tanto com gerentes quanto com empresas. Ele deve receber um par\xE2metro do tipo Usuario.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Usuario</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> <span class="token function">autenticar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cliente</span> <span class="token punctuation">{</span>
    <span class="token comment">//...    </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PessoaFisica</span> <span class="token keyword">extends</span> <span class="token class-name">Cliente</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PessoaJuridica</span> <span class="token keyword">extends</span> <span class="token class-name">Cliente</span> <span class="token keyword">implements</span> <span class="token class-name">Usuario</span> <span class="token punctuation">{</span>
    <span class="token comment">//...    </span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">autenticar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Gerente</span> <span class="token keyword">extends</span> <span class="token class-name">Funcionario</span> <span class="token keyword">implements</span> <span class="token class-name">Usuario</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">autenticar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>       
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Seguranca</span> <span class="token keyword">extends</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutenticadorDeUsuario</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> autentica <span class="token punctuation">(</span> <span class="token class-name">Usuario</span> u <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// implementa\xE7\xE3o</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="mais-sobre-heranca-e-interface" tabindex="-1"><a class="header-anchor" href="#mais-sobre-heranca-e-interface" aria-hidden="true">#</a> Mais sobre heran\xE7a e interface</h6><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Conta</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getSaldo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deposita</span><span class="token punctuation">(</span><span class="token keyword">double</span> valor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saca</span><span class="token punctuation">(</span><span class="token keyword">double</span> valor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">atualiza</span><span class="token punctuation">(</span><span class="token keyword">double</span> taxaSelic<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ContaCorrente</span> <span class="token keyword">implements</span> <span class="token class-name">Conta</span> <span class="token punctuation">{</span>
<span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">ContaPoupanca</span> <span class="token keyword">implements</span> <span class="token class-name">Conta</span> <span class="token punctuation">{</span>
<span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\xC0s vezes, \xE9 interessante criarmos uma interface que herda de outras interfaces: essas, s\xE3o chamadas subinterfaces. Essas, nada mais s\xE3o do que um agrupamento de obriga\xE7\xF5es para a classe que a implementar</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">interface</span>  <span class="token class-name">Tributavel</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">calcularTributo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">ContaTributavel</span> <span class="token keyword">extends</span> <span class="token class-name">Conta</span><span class="token punctuation">,</span> <span class="token class-name">Tributavel</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dessa maneira, quem for implementar essa nova interface precisa implementar todos os m\xE9todos herdados das suas superinterfaces (e talvez ainda novos m\xE9todos declarados dentro dela):</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ContaInvestimento</span> <span class="token keyword">implements</span> <span class="token class-name">ContaTributavel</span> <span class="token punctuation">{</span>
<span class="token comment">// m\xE9todos</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ContaTributavel</span> ct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContaInvestimento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Conta</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContaInvestimento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Tributavel</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContaInvestimento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Perceba que o c\xF3digo pode parecer estranho, pois a interface n\xE3o declara m\xE9todo algum, s\xF3 herda os m\xE9todos abstratos declarados nas outras interfaces. Ao mesmo tempo que uma interface pode herdar de mais de uma outra interface, classes s\xF3 podem possuir uma classe m\xE3e (heran\xE7a simples).</p><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0ipBpIbABqXAJKnMSy_DA4f7u2Y55cKcb9ObbgHYg438AgHKbgNafnH1n7MGzoJc9nL1npxoorEAIpDpKl99yXSpSWfnK4BCOtJ0k1w1HOET1Q000" alt="uml diagram" loading="lazy"><figcaption>Representa\xE7\xE3o da heran\xE7a entre interfaces.</figcaption></figure><h4 id="interfaces-classe-abstratas" tabindex="-1"><a class="header-anchor" href="#interfaces-classe-abstratas" aria-hidden="true">#</a> Interfaces = Classe Abstratas</h4><p>Em algumas linguagens de programa\xE7\xE3o n\xE3o existe o conceito de <code>interface</code>.</p><p>A <code>interface</code> \xE9 um tipo espec\xEDfico de classe abstrata onde existe apenas as defini\xE7\xF5es de comportamentos.</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>Takenami, Igor. Introdu\xE7\xE3o a Programa\xE7\xE3o Orientada a Objetos. Salvador. 2011. (Apostila). <a href="#footnote-ref1" class="footnote-backref">\u21A9\uFE0E</a></p></li><li id="footnote2" class="footnote-item"><p>Caelum. Java e Orienta\xE7\xE3o a Objetos - Curso fj-11. <a href="#footnote-ref2" class="footnote-backref">\u21A9\uFE0E</a> <a href="#footnote-ref2:1" class="footnote-backref">\u21A9\uFE0E</a> <a href="#footnote-ref2:2" class="footnote-backref">\u21A9\uFE0E</a> <a href="#footnote-ref2:3" class="footnote-backref">\u21A9\uFE0E</a></p></li><li id="footnote3" class="footnote-item"><p>K19-Treinamentos. (2013). Orienta\xE7\xE3o a Objetos em Java, 220. <a href="#footnote-ref3" class="footnote-backref">\u21A9\uFE0E</a> <a href="#footnote-ref3:1" class="footnote-backref">\u21A9\uFE0E</a> <a href="#footnote-ref3:2" class="footnote-backref">\u21A9\uFE0E</a> <a href="#footnote-ref3:3" class="footnote-backref">\u21A9\uFE0E</a></p></li></ol></section>`,328),c=[t];function p(i,l){return s(),n("div",null,c)}const u=a(o,[["render",p],["__file","02_revisao_poo2.html.vue"]]);export{u as default};
