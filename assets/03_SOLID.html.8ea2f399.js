import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as p,a,b as s,d as e,e as i,r as c}from"./app.9d651720.js";const l={},d=i(`<h1 id="principios-solid" tabindex="-1"><a class="header-anchor" href="#principios-solid" aria-hidden="true">#</a> Princ\xEDpios SOLID</h1><p>Adaptado de <sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>.</p><p>SOLID s\xE3o cinco princ\xEDpios da programa\xE7\xE3o orientada a objetos que facilitam no desenvolvimento de softwares, tornando-os f\xE1ceis de manter e estender. Esses princ\xEDpios podem ser aplicados a qualquer linguagem de Programa\xE7\xE3o Orientada a Objetos.</p><p>Michael Feathers criou esse acr\xF4nimo ap\xF3s observar cinco princ\xEDpios da orienta\xE7\xE3o a objetos e design de c\xF3digo criados por Robert C. Martin (a.k.a. Uncle Bob) e abordados no artigo The Principles of OOD</p><p>S.O.L.I.D: Os 5 princ\xEDpios da POO</p><ol><li>S \u2014 Single Responsiblity Principle (Princ\xEDpio da responsabilidade \xFAnica)</li><li>O \u2014 Open-Closed Principle (Princ\xEDpio Aberto-Fechado)</li><li>L \u2014 Liskov Substitution Principle (Princ\xEDpio da substitui\xE7\xE3o de Liskov)</li><li>I \u2014 Interface Segregation Principle (Princ\xEDpio da Segrega\xE7\xE3o da Interface)</li><li>D \u2014 Dependency Inversion Principle (Princ\xEDpio da invers\xE3o da depend\xEAncia)</li></ol><p>Esses princ\xEDpios ajudam o programador a escrever c\xF3digos mais limpos, separando responsabilidades, diminuindo acoplamentos, facilitando na refatora\xE7\xE3o e estimulando o reaproveitamento do c\xF3digo.</p><h2 id="principio-da-responsabilidade-unica-srp" tabindex="-1"><a class="header-anchor" href="#principio-da-responsabilidade-unica-srp" aria-hidden="true">#</a> Princ\xEDpio da Responsabilidade \xDAnica (SRP)</h2><p>Adaptado de <sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup> e <sup class="footnote-ref"><a href="#footnote1">[1:1]</a><a class="footnote-anchor" id="footnote-ref1:1"></a></sup>.</p><p>Este princ\xEDpio nada mais \xE9 do que uma perspectiva diferente para um dos mais fundamentais princ\xEDpios da orienta\xE7\xE3o a objetos: a coes\xE3o.</p><p>Esse princ\xEDpio declara que uma classe deve ser especializada em um \xFAnico assunto e possuir apenas uma responsabilidade dentro do software, ou seja, a classe deve ter uma \xFAnica tarefa ou a\xE7\xE3o para executar.</p><div class="custom-container tip"><p class="custom-container-title">Princ\xEDpio da Responsabilidade \xDAnica</p><p>Uma classe deve ter um, e somente um, motivo para mudar.</p></div><p>Vamos tentar entender o que isso significa e eventuais problemas causados pela viola\xE7\xE3o deste princ\xEDpio.</p><h3 id="alguns-problemas" tabindex="-1"><a class="header-anchor" href="#alguns-problemas" aria-hidden="true">#</a> Alguns Problemas</h3><p>Quando estamos aprendendo programa\xE7\xE3o orientada a objetos, sem sabermos, damos a uma classe mais de uma responsabilidade e acabamos criando classes que fazem de tudo (<em>God Class</em>). Num primeiro momento isso pode parecer eficiente, mas como as responsabilidades acabam se misturando, quando h\xE1 necessidade de realizar altera\xE7\xF5es nessa classe, ser\xE1 dif\xEDcil modificar uma dessas responsabilidades sem comprometer as outras. Toda altera\xE7\xE3o acaba sendo introduzida com um certo n\xEDvel de incerteza em nosso sistema \u2014 principalmente se n\xE3o existirem testes automatizados!</p><p>Alguns problemas decorrentes da utiliza\xE7\xE3o de <em>God Class</em>:</p><ul><li>Dificuldade de compreens\xE3o e, portanto, dificuldade de manuten\xE7\xE3o.</li><li>Dificuldade de reuso.</li><li>Com responsabilidades entrela\xE7adas em uma mesma classe, pode ficar dif\xEDcil alterar uma dessas responsabilidades sem comprometer as outras (rigidez) e pode acabar quebrando outras partes do software (fragilidade).</li><li>Acoplamento alto, ou seja, a classe tem um n\xFAmero excessivo de depend\xEAncias, e portanto fica mais sujeita a mudan\xE7as em decorr\xEAncia de altera\xE7\xF5es em outras classes (novamente a fragilidade).</li></ul><h3 id="exemplos-comuns-de-violacao" tabindex="-1"><a class="header-anchor" href="#exemplos-comuns-de-violacao" aria-hidden="true">#</a> Exemplos Comuns de Viola\xE7\xE3o</h3><p>Imaginem uma classe de neg\xF3cio Pedido:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pedido</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">adicionarProduto</span><span class="token punctuation">(</span><span class="token class-name">Produto</span> produto<span class="token punctuation">,</span> <span class="token keyword">int</span> quantidade<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calcularTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gerarPlanilhaExcel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>No exemplo acima, temos uma quebra do SRP de uma forma bem expl\xEDcita, uma vez que temos responsabilidades que deveriam ser de componentes distintos do software. Enquanto os dois primeiros m\xE9todos fazem sentido para o dom\xEDnio do qual Pedido faz parte, o \xFAltimo est\xE1 relacionado \xE0 exibi\xE7\xE3o de dados em um formato espec\xEDfico, o que faz mais sentido em camadas superiores, como de Aplica\xE7\xE3o ou de UI.</p><p>Em um projeto com v\xE1rias classes seguindo esse \u201Cpadr\xE3o\u201D, fica dif\xEDcil \u2013 ou imposs\xEDvel \u2013 manter a coes\xE3o em um n\xEDvel mais alto: em n\xEDvel de componentes. Em outras palavras, o software acaba sendo um emaranhado de classes sem um divis\xE3o clara de camadas.</p><p>De forma mais pr\xE1tica: chega um momento onde fica imposs\xEDvel separar determinadas classes em uma class library devido \xE0 refer\xEAncia circular. Tamb\xE9m fica complicado fazer o deploy de componentes isolados por haver depend\xEAncias demais entre eles.</p><p>Outros exemplos comuns s\xE3o:</p><ol><li>Classes que misturam neg\xF3cio e persist\xEAncia (Pedido, por exemplo, cont\xE9m m\xE9todos que sabem incluir, alterar e excluir pedidos, fazendo com o que mesmo seja acoplado com classes como SqlConnection ou ainda algum ORM);</li><li><em>View models</em> que apresentam regras de neg\xF3cio;</li></ol><h3 id="um-exemplo-menos-obvio" tabindex="-1"><a class="header-anchor" href="#um-exemplo-menos-obvio" aria-hidden="true">#</a> Um Exemplo Menos \xD3bvio</h3><p>Nem sempre \xE9 f\xE1cil identificar v\xE1rias responsabilidades em uma mesma classe. Eu diria que na maioria das vezes n\xE3o \xE9. Ali\xE1s, atribuir responsabilidades \xE9 uma das principais tarefas de um programador OO.</p><p>Mesmo que uma classe de neg\xF3cio esteja fazendo apenas tarefas relacionadas ao seu dom\xEDnio, ela pode estar fazendo coisas demais.</p><p>Vejamos o seguinte exemplo:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cliente</span><span class="token punctuation">{</span>
    <span class="token comment">// dados do cliente, como Nome, CPF, etc.</span>
    <span class="token comment">// outros m\xE9todos</span>
 
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calcularDescontoPara</span><span class="token punctuation">(</span><span class="token class-name">Venda</span> venda<span class="token punctuation">)</span>    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FormaDePagamento<span class="token punctuation">.</span>AVista</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>venda<span class="token punctuation">.</span><span class="token function">getFormaDePagamento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>venda<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2000</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> venda<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.2</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> venda<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Observem acima que o m\xE9todo <code>calcularDescontoPara</code> n\xE3o manipula nenhum dado da classe <code>Cliente</code>, ou seja, nenhuma informa\xE7\xE3o do cliente \xE9 necess\xE1ria para se determinar o valor do desconto.</p><p>Sendo assim, esta classe possui pelo menos duas raz\xF5es para mudar: uma quando houver altera\xE7\xE3o na l\xF3gica de neg\xF3cio referente a um <code>Cliente</code> e outra quando houver alguma altera\xE7\xE3o na l\xF3gica de uma <code>Venda</code>.</p><p>Certamente, faz mais sentido que este m\xE9todo seja da classe <code>Venda</code>!</p><h3 id="outro-exemplo" tabindex="-1"><a class="header-anchor" href="#outro-exemplo" aria-hidden="true">#</a> Outro exemplo</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculateTotalSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token class-name">Item</span> item<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteItem</span><span class="token punctuation">(</span><span class="token class-name">Item</span> item<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A classe <code>Order</code> viola o SRP porque realiza 3 tipos distintos de tarefas. Al\xE9m de lidar com as informa\xE7\xF5es do pedido, ela tamb\xE9m \xE9 respons\xE1vel pela exibi\xE7\xE3o e manipula\xE7\xE3o dos dados. Lembre-se, o princ\xEDpio da responsabilidade \xFAnica preza que uma classe deve ter um, e somente um, motivo para mudar.</p><p>A viola\xE7\xE3o do <em>Single Responsibility Principle</em> pode gerar alguns problemas, sendo eles:</p><ul><li>Falta de coes\xE3o \u2014 uma classe n\xE3o deve assumir responsabilidades que n\xE3o s\xE3o suas;</li><li>Alto acoplamento \u2014 Mais responsabilidades geram um maior n\xEDvel de depend\xEAncias, deixando o sistema engessado e fr\xE1gil para altera\xE7\xF5es;</li><li>Dificuldades na implementa\xE7\xE3o de testes automatizados \u2014 \xC9 dif\xEDcil de &quot;mockar&quot; esse tipo de classe;</li><li>Dificuldades para reaproveitar o c\xF3digo; Aplicando o SRP na classe Order, podemos refatorar o c\xF3digo da seguinte forma:</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculateTotalSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token class-name">Item</span> item<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteItem</span><span class="token punctuation">(</span><span class="token class-name">Item</span> item<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderRepository</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">double</span> orderId<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderViewer</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printOrder</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showOrder</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Perceba no exemplo acima que agora temos 3 classes, cada uma cuidando da sua responsabilidade.</p><p>O princ\xEDpio da responsabilidade \xFAnica n\xE3o se limita somente a classes, ele tamb\xE9m pode ser aplicado em m\xE9todos e fun\xE7\xF5es, ou seja, tudo que \xE9 respons\xE1vel por executar uma a\xE7\xE3o, deve ser respons\xE1vel por apenas aquilo que se prop\xF5e a fazer.</p><h3 id="conclusao" tabindex="-1"><a class="header-anchor" href="#conclusao" aria-hidden="true">#</a> Conclus\xE3o</h3><p>O SRP \xE9 um dos princ\xEDpios mais importantes que existe na orienta\xE7\xE3o a objetos. Quando falamos de responsabilidades e coes\xE3o estamos tocando em dois pontos-chave da OO, que nos ajudam a criar classes menores, de mais f\xE1cil entendimento, manuten\xE7\xE3o e reuso.</p><h2 id="principio-aberto-fechado-ocp" tabindex="-1"><a class="header-anchor" href="#principio-aberto-fechado-ocp" aria-hidden="true">#</a> Princ\xEDpio Aberto-Fechado (OCP)</h2><p>Adaptado de <sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup> e <sup class="footnote-ref"><a href="#footnote1">[1:2]</a><a class="footnote-anchor" id="footnote-ref1:2"></a></sup>.</p><p>O OCP \xE9 mais um daqueles princ\xEDpios de orienta\xE7\xE3o a objetos que nos ajudam a eliminar <em>design smells,</em> possibilitando que nosso c\xF3digo ganhe em facilidade de manuten\xE7\xE3o e extens\xE3o.</p><div class="custom-container tip"><p class="custom-container-title">Princ\xEDpio Aberto-Fechado</p><p>Entidades de software (classes, m\xF3dulos, fun\xE7\xF5es, etc.) devem ser abertas para extens\xE3o mas fechadas para modifica\xE7\xE3o.</p></div><p>A moral da hist\xF3ria \xE9 a seguinte: quando eu precisar estender o comportamento de um c\xF3digo, eu crio c\xF3digo novo ao inv\xE9s de alterar o c\xF3digo existente.</p><p>Objetos ou entidades devem estar abertos para extens\xE3o, mas fechados para modifica\xE7\xE3o, ou seja, quando novos comportamentos e recursos precisam ser adicionados no software, devemos estender e n\xE3o alterar o c\xF3digo fonte original.</p><h3 id="exemplo-pratico-do-ocp" tabindex="-1"><a class="header-anchor" href="#exemplo-pratico-do-ocp" aria-hidden="true">#</a> Exemplo pr\xE1tico do OCP:</h3><p>Em um sistema hipot\xE9tico de RH, temos duas classes que representam os contratos de trabalhos dos funcion\xE1rios de uma pequena empresa, contratados e estagi\xE1rios. Al\xE9m de uma classe para processar a folha de pagamento.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContratoClt</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">salario</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Estagio</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">bolsaAuxilio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FolhaDePagamento</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> saldo<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calcular</span><span class="token punctuation">(</span><span class="token class-name">ContratoClt</span> contratoClt  <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">=</span> contratoClt<span class="token punctuation">.</span><span class="token function">salario</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calcular</span><span class="token punctuation">(</span><span class="token class-name">Estagio</span> estagio <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">=</span> estagio<span class="token punctuation">.</span><span class="token function">bolsaAuxilio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A classe <code>FolhaDePagamento</code> precisa verificar o funcion\xE1rio para aplicar a regra de neg\xF3cio correta na hora do pagamento. Supondo que a empresa cresceu e resolveu trabalhar com funcion\xE1rios PJ, obviamente seria necess\xE1rio modificar essa classe! Sendo assim, estar\xEDamos quebrando o princ\xEDpio Aberto-Fechado do SOLID.</p><p>Qual o problema de se alterar a classe FolhaDePagamento?</p><p>N\xE3o seria mais f\xE1cil apenas acrescentar mais um IF (ou criar um novo m\xE9todo) e verificar o novo tipo de funcion\xE1rio PJ aplicando as respectivas regras? Sim, e provavelmente essa seria a solu\xE7\xE3o que programadores menos experientes iriam fazer. Mas, esse \xE9 exatamente o problema! <em>Alterar uma classe j\xE1 existente para adicionar um novo comportamento, corremos um s\xE9rio risco de introduzir bugs em algo que j\xE1 estava funcionando.</em></p><div class="custom-container tip"><p class="custom-container-title">Lembre-se</p><p>OCP preza que uma classe deve estar fechada para altera\xE7\xE3o e aberta para extens\xE3o.</p></div><p>Como adicionamos um novo comportamento sem alterar o c\xF3digo fonte j\xE1 existente?</p><p>O guru Uncle Bob resumiu a solu\xE7\xE3o em uma frase:</p><blockquote><p>Separate extensible behavior behind an interface, and flip the dependencies.</p></blockquote><p>Em tradu\xE7\xE3o direta, seria:</p><blockquote><p>Separe o comportamento extens\xEDvel por tr\xE1s de uma interface e inverta as depend\xEAncias.</p></blockquote><p>O que devemos fazer \xE9 concentrar nos aspectos ess\xEAncias do contexto, abstraindo-os para uma interface. Se as abstra\xE7\xF5es s\xE3o bem definidas, logo o software estar\xE1 aberto para extens\xE3o.</p><h3 id="aplicando-ocp-na-pratica" tabindex="-1"><a class="header-anchor" href="#aplicando-ocp-na-pratica" aria-hidden="true">#</a> Aplicando OCP na pr\xE1tica</h3><p>Voltando para o nosso exemplo, podemos concluir que o contexto que estamos lidando \xE9 a remunera\xE7\xE3o dos contratos de trabalho, aplicando as premissas de se isolar o comportamento extens\xEDvel atr\xE1s de uma interface, podemos criar uma interface com o nome <code>Remuneravel</code> contendo o m\xE9todo <code>remuneracao()</code>, e fazer com que nossas classes de contrato de trabalho implementem essa interface. Al\xE9m disso, iremos colocar as regras de calculo de remunera\xE7\xE3o para suas respectivas classes, dentro do m\xE9todo <code>remuneracao()</code>, fazendo com que a classe <code>FolhaDePagamento</code> dependa somente da interface <code>Remuneravel</code> que iremos criar.</p><p>Veja o c\xF3digo refatorado abaixo:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Remuneravel</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">remuneracao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContratoClt</span> <span class="token keyword">implements</span> <span class="token class-name">Remuneravel</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">remuneracao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">salario</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Estagio</span> <span class="token keyword">implements</span> <span class="token class-name">Remuneravel</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">remuneracao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">bolsaAuxilio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FolhaDePagamento</span><span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">double</span> saldo<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calcular</span><span class="token punctuation">(</span><span class="token class-name">Remuneravel</span> funcionario<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">=</span> funcionario<span class="token punctuation">.</span><span class="token function">remuneracao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Agora a classe <code>FolhaDePagamento</code> n\xE3o precisa mais saber quais m\xE9todos chamar para calcular. Ela ser\xE1 capaz de calcular o pagamento corretamente de qualquer novo tipo de funcion\xE1rio que seja criado no futuro (<code>ContratoPJ</code>) \u2014 desde que ele implemente a interface <code>Remuneravel</code> \u2014 sem qualquer necessidade de altera\xE7\xE3o do seu c\xF3digo fonte. Dessa forma, acabamos de implementar o princ\xEDpio de Aberto-Fechado do SOLID em nosso c\xF3digo!</p><p>Open-Closed Principle tamb\xE9m \xE9 base para o padr\xE3o de projeto Strategy</p><h3 id="outro-exemplo-de-violacao-ocp" tabindex="-1"><a class="header-anchor" href="#outro-exemplo-de-violacao-ocp" aria-hidden="true">#</a> Outro Exemplo de viola\xE7\xE3o (OCP)</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Arquivo</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArquivoWord</span> <span class="token keyword">extends</span> <span class="token class-name">Arquivo</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gerarDocX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// codigo para geracao do arquivo</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArquivoPdf</span> <span class="token keyword">extends</span> <span class="token class-name">Arquivo</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gerarPdf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// codigo para geracao do arquivo</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeradorDeArquivos</span><span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gerarArquivos</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Arquivo</span><span class="token punctuation">&gt;</span></span> arquivos<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Arquivo</span> arquivo <span class="token operator">:</span> arquivos<span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>arquivo <span class="token keyword">instanceof</span> <span class="token class-name">ArquivoWord</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ArquivoWord</span><span class="token punctuation">)</span>arquivo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gerarDocX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arquivo <span class="token keyword">instanceof</span> <span class="token class-name">ArquivoPdf</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ArquivoPdf</span><span class="token punctuation">)</span>arquivo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gerarPdf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>No exemplo acima temos classes que geram arquivos do Word e PDFs. E temos uma classe <code>GeradorDeArquivos</code> que recebe uma lista de arquivos e gera todos eles (por <em>gerar</em>, entenda criar um arquivo novo no formato especificado e salv\xE1-lo em disco).</p><p>Suponha agora que tenhamos que estender a aplica\xE7\xE3o para dar suporte a arquivos em outro formato, como, por exemplo, arquivos texto (.txt) e precisamos que o m\xE9todo <code>gerarArquivos</code> tamb\xE9m gere arquivos no novo formato.</p><p>Al\xE9m da nova classe, que poder\xEDamos chamar de <code>ArquivoTxt</code>, ser\xEDamos obrigados a alterar o m\xE9todo <code>gerarArquivos</code> para atender a esse requisito. O mais \xF3bvio seria colocar mais um <code>else if</code>, checando pelo novo tipo (txt) e chamando o m\xE9todo correspondente: <code>((ArquivoTxt)arquivo).gerarTxt()</code>. Esse padr\xE3o seguiria sucessivamente a cada necessidade de um novo formato de arquivo.</p><p>Sendo assim, podemos afirmar que o m\xE9todo <code>gerarArquivos</code> n\xE3o est\xE1 em conformidade com o OCP para mudan\xE7as do tipo <em>preciso de um novo formato de arquivo</em>, uma vez que o m\xE9todo n\xE3o est\xE1 fechado para essas mudan\xE7as.</p><p>Vamos pensar na situa\xE7\xE3o onde existam outras partes da aplica\xE7\xE3o que tamb\xE9m fazem as verifica\xE7\xF5es por tipo vistas no m\xE9todo <code>gerarArquivos</code> para invocar outros m\xE9todos espec\xEDficos de cada classe concreta. Para piorar, algumas dessas partes est\xE3o em outros componentes da aplica\xE7\xE3o.</p><p>O que acontece quando precisamos de um novo formato de arquivo?</p><p>Al\xE9m de criarmos nosso novo arquivo, como <code>ArquivoTxt</code>, ter\xEDamos que:</p><ol><li>Alterar todos os m\xE9todos que precisem fazer uso do novo formato (certamente aqueles com v\xE1rios <code>if/else if</code> ou um belo <code>switch..case</code>).</li><li>Recompilar e fazer o deploy de todos os componentes que foram impactados.</li></ol><p>Quando uma mudan\xE7a dessas acaba causando uma s\xE9rie de mudan\xE7as em cascata, fica claro que nosso design n\xE3o est\xE1 bom pois, al\xE9m de mais trabalho para alterarmos, ainda podemos nos esquecer de algumas dessas partes do c\xF3digo.</p><p>Al\xE9m disso, quanto mais c\xF3digo para alterar, que j\xE1 estava pronto e funcionando, mais chances de introduzir bugs.</p><h4 id="atendendo-ocp" tabindex="-1"><a class="header-anchor" href="#atendendo-ocp" aria-hidden="true">#</a> Atendendo OCP</h4><p>para atender o OCP o c\xF3digo poderia ser alterado da seguinte forma:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Arquivo</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">gerar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArquivoWord</span> <span class="token keyword">extends</span> <span class="token class-name">Arquivo</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gerar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// codigo para geracao do arquivo</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArquivoPdf</span> <span class="token keyword">extends</span> <span class="token class-name">Arquivo</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gerar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// codigo para geracao do arquivo</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArquivoTxt</span> <span class="token keyword">extends</span> <span class="token class-name">Arquivo</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gerar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// codigo para geracao do arquivo</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeradorDeArquivos</span><span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gerarArquivos</span><span class="token punctuation">(</span><span class="token class-name">IList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Arquivo</span><span class="token punctuation">&gt;</span></span> arquivos<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Arquivo</span> arquivo <span class="token operator">:</span> arquivos<span class="token punctuation">)</span><span class="token punctuation">{</span>
        arquivo<span class="token punctuation">.</span><span class="token function">gerar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Algumas pequenas mudan\xE7as foram realizadas para melhorar a estrutura\xE7\xE3o do c\xF3digo:</p><ol><li>A classe <code>Arquivo</code> foi transformada em uma classe abstrata, j\xE1 que n\xE3o h\xE1 a inten\xE7\xE3o de instanci\xE1-la diretamente.</li><li>Foi criado um m\xE9todo abstrato para a gera\xE7\xE3o de arquivos na classe base, denominado de <code>gerar</code>.</li><li>As classes derivadas foram modificadas para implementar o m\xE9todo <code>gerar</code>.</li><li>Um novo requisito foi introduzido, ou seja, um novo tipo de arquivo (<code>ArquivoTxt</code>), que tamb\xE9m herda da classe <code>Arquivo</code> e implementa o m\xE9todo <code>gerar</code>.</li><li>As verifica\xE7\xF5es de tipo presentes no m\xE9todo <code>gerarArquivos</code> foram eliminadas e o polimorfismo foi utilizado em seu lugar.</li></ol><p>Em resumo, agora sempre que um novo formato de arquivo surgir, \xE9 poss\xEDvel estender o comportamento do m\xE9todo <code>gerarArquivos</code> para lidar com ele, sem a necessidade de modific\xE1-lo. Basta criar o novo tipo de arquivo e ele estar\xE1 pronto para ser gerado. Simples e eficiente!</p><h3 id="conclusao-1" tabindex="-1"><a class="header-anchor" href="#conclusao-1" aria-hidden="true">#</a> Conclus\xE3o</h3><p>O Princ\xEDpio do Aberto/Fechado nos atenta para a aplica\xE7\xE3o de abstra\xE7\xF5es e polimorfismo, de forma consciente, garantindo que tenhamos um software mais flex\xEDvel e, portanto, mais f\xE1cil de ser mantido.</p><h2 id="principio-da-substituicao-de-liskov" tabindex="-1"><a class="header-anchor" href="#principio-da-substituicao-de-liskov" aria-hidden="true">#</a> Princ\xEDpio da substitui\xE7\xE3o de Liskov</h2><p><sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup></p><p>O Princ\xEDpio de Substitui\xE7\xE3o de Liskov \xE9 uma ferramenta essencial para a identifica\xE7\xE3o de conceitos semelhantes sendo representados por classes diferentes. Ele \xE9 baseado na ideia de que uma classe derivada deve ser capaz de substituir sua classe base sem afetar o comportamento do programa. Isso significa que, se um programa pode utilizar objetos de tipos diferentes de maneira intercambi\xE1vel, ent\xE3o esses objetos deveriam ser de classes que possuem uma rela\xE7\xE3o de heran\xE7a.</p><p>Ao aplicar o LSP, os desenvolvedores podem garantir que suas classes derivadas respeitem as mesmas regras e comportamentos que suas classes base. Isso ajuda a manter a coer\xEAncia e consist\xEAncia do c\xF3digo, bem como a facilitar a manuten\xE7\xE3o e a evolu\xE7\xE3o do software.</p><p>Por exemplo, imagine que um programa possui uma classe <code>Forma</code> que representa a forma geom\xE9trica b\xE1sica e dela s\xE3o derivadas duas outras classes <code>Ret\xE2ngulo</code> e <code>Tri\xE2ngulo</code>. Se o programa tem uma fun\xE7\xE3o que calcula a \xE1rea de uma forma, \xE9 importante que essa fun\xE7\xE3o funcione de maneira consistente para todas as formas, independentemente de serem ret\xE2ngulos ou tri\xE2ngulos.</p><p>Imagine agora que o sistema possui uma classe <code>Circulo</code> e essa classe n\xE3o fa\xE7a parte da fam\xEDlia <code>Forma</code>. Durante a execu\xE7\xE3o do programa o comportamento de <code>Circulo</code> \xE9 muito semelhante aos dos filhos de <code>Forma</code>. <code>Circulo</code> pode ser desenhado na tela, ter suas caracter\xEDsticas de tamanho e cor alteradas e ter uma formula para o calculo de area. Assim como os objetos da fam\xEDlia <code>Circulo</code>.</p><h3 id="definicao" tabindex="-1"><a class="header-anchor" href="#definicao" aria-hidden="true">#</a> Defini\xE7\xE3o</h3><p>O Princ\xEDpio de Substitui\xE7\xE3o de Liskov leva esse nome por ter sido criado por Barbara Liskov, em 1988. A defini\xE7\xE3o formal de Liskov diz que:</p><div class="custom-container tip"><p class="custom-container-title">Defini\xE7\xE3o</p><p>Se para cada objeto <code>o1</code> do tipo <code>S</code> h\xE1 um objeto <code>o2</code> do tipo <code>T</code> de forma que, para todos os programas <code>P</code> definidos em termos de <code>T</code>, o comportamento de <code>P</code> \xE9 inalterado quando <code>o1</code> \xE9 substitu\xEDdo por <code>o2</code> ent\xE3o <code>S</code> \xE9 um subtipo de <code>T</code></p></div><h2 id="principio-da-segregacao-de-interface-isp" tabindex="-1"><a class="header-anchor" href="#principio-da-segregacao-de-interface-isp" aria-hidden="true">#</a> Princ\xEDpio da Segrega\xE7\xE3o de Interface (ISP)</h2><p><sup class="footnote-ref"><a href="#footnote5">[5]</a><a class="footnote-anchor" id="footnote-ref5"></a></sup> <sup class="footnote-ref"><a href="#footnote6">[6]</a><a class="footnote-anchor" id="footnote-ref6"></a></sup></p><h2 id="o-que-e-uma-interface" tabindex="-1"><a class="header-anchor" href="#o-que-e-uma-interface" aria-hidden="true">#</a> O que \xE9 uma interface?</h2><p>Uma interface define um contrato que uma classe deve seguir, especificando quais m\xE9todos ela deve implementar. Quando <code>Cliente</code> deseja interagir com <code>ServicoA</code>, v se comunicar\xE1 por meio da interface <code>Servico</code>, para a qual <code>ServicoA</code> e <code>Cliente</code> se entendem mutuamente.</p><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLd3EoKpDAqc5ye9JYyeoa_CT5J9p2t9ISu4oS345BYweMWKzX9X3QbuAq300" alt="uml diagram" loading="lazy"><figcaption>Uso de interface pela classe Cliente</figcaption></figure><p>Interfaces s\xE3o \xFAteis para polimorfismo. o objeto <code>Cliente</code> apenas entende ou sabe sobre a interface <code>Servico</code>, o que significa que ele n\xE3o sabe que o objeto <code>ServicoA</code> existe. Isso significa que pode ocorrer polimorfismo - ou seja, o objeto <code>Servico</code> pode ser substitu\xEDdo por muitas implementa\xE7\xF5es diferentes, sem afetar o objeto <code>Cliente</code></p><h2 id="definicao-1" tabindex="-1"><a class="header-anchor" href="#definicao-1" aria-hidden="true">#</a> Defini\xE7\xE3o</h2><p>O Princ\xEDpio da Segrega\xE7\xE3o de Interface trata da coes\xE3o de interfaces e diz que</p><div class="custom-container tip"><p class="custom-container-title">Defini\xE7\xE3o</p><p>Clientes n\xE3o devem ser for\xE7ados a depender de m\xE9todos que n\xE3o usam.</p></div><p>Este princ\xEDpio afirma que os clientes n\xE3o devem ser for\xE7ados a depender das interfaces que eles n\xE3o usam. Quando temos interfaces n\xE3o coesas, o ISP nos orienta a criar m\xFAltiplas interfaces menores e coesas.</p><div class="custom-container warning"><p class="custom-container-title">Avisos</p><p>Coes\xE3o \xE9 o n\xEDvel de integralidade interna de uma classe e mede o grau em que uma classe ou seus m\xE9todos fazem sentido, ou seja, qu\xE3o claro \xE9 o entendimento do que a classe ou m\xE9todo possui. Uma alta coes\xE3o indica responsabilidades bem definidas.</p></div><p>Quando voc\xEA aplica o ISP, a classe e suas depend\xEAncias se comunicam usando interfaces fortemente focadas, minimizando as depend\xEAncias de membros n\xE3o utilizados e reduzindo o acoplamento de acordo.</p><p>Interfaces menores s\xE3o mais f\xE1ceis de implementar, melhorando a flexibilidade e a possibilidade de reutiliza\xE7\xE3o. Como menos classes compartilham interfaces, o n\xFAmero de altera\xE7\xF5es necess\xE1rias em resposta a uma modifica\xE7\xE3o da interface \xE9 reduzido, e, isso aumenta a robustez.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>   <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Pedido</span><span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token function">compra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">void</span> <span class="token function">processarCartaoCredito</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PedidoOnline</span> <span class="token keyword">implements</span> <span class="token class-name">Pedido</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//c\xF3digo da compra</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processarCartaoCredito</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//processo do cart\xE3o</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PedidoPresencial</span> <span class="token keyword">implements</span> <span class="token class-name">Pedido</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//c\xF3digo da compra</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processarCartaoCredito</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//N\xE3o precisa para boleto</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Neste c\xF3digo temos a interface <code>Pedido</code> sendo implementada pelas classes PedidoOnline e <code>PedidoPresencial</code>.</p><p>Aparentemente tudo esta correto e o c\xF3digo vai funcionar.</p><p>Mas este c\xF3digo esta violando o princ\xEDpio ISP pois a interface <code>Pedido</code> esta sendo implementada pela classe <code>PedidoPresencial</code> mas esta classe n\xE3o esta implementando o m\xE9todo <code>ProcessarCartaoCredito</code>.</p><p>Assim a classe esta sendo for\xE7ada a depender do m\xE9todo <code>ProcessarCartaoCredito</code> que ela n\xE3o precisa usar.</p><p>Para adequar o c\xF3digo ao princ\xEDpio ISP podemos fazer assim:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>   <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Pedido</span><span class="token punctuation">{</span> 
        <span class="token keyword">void</span> <span class="token function">compra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
   <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PagamentoCartao</span><span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token function">processarCartaoCredito</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PedidoOnline</span> <span class="token keyword">implements</span> <span class="token class-name">Pedido</span><span class="token punctuation">,</span> <span class="token class-name">PagamentoCartao</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//c\xF3digo da compra</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processarCartaoCredito</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//processo do cart\xE3o</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PedidoPresencial</span> <span class="token keyword">implements</span> <span class="token class-name">Pedido</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//c\xF3digo da compra</span>
        <span class="token punctuation">}</span>        
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Agora temos interfaces espec\xEDficas <code>Pedido</code> e <code>PagamentoCartao</code>, e, nenhuma classe esta sendo obrigada a implementa um m\xE9todo que n\xE3o utiliza.</p><h2 id="principio-da-inversao-de-dependencia-dip" tabindex="-1"><a class="header-anchor" href="#principio-da-inversao-de-dependencia-dip" aria-hidden="true">#</a> Princ\xEDpio da Invers\xE3o de Depend\xEAncia (DIP)</h2><p><sup class="footnote-ref"><a href="#footnote7">[7]</a><a class="footnote-anchor" id="footnote-ref7"></a></sup></p><div class="custom-container tip"><p class="custom-container-title">Defini\xE7\xE3o</p><ul><li>Dependa de abstra\xE7\xF5es e n\xE3o de implementa\xE7\xF5es</li><li>M\xF3dulos de alto n\xEDvel n\xE3o devem depender de m\xF3dulos de baixo n\xEDvel. Ambos devem depender de abstra\xE7\xF5es</li><li>Abstra\xE7\xF5es n\xE3o devem depender de detalhes. Detalhes devem depender de abstra\xE7\xF5es</li></ul></div><p>que, basicamente significam <em>Programe para uma interface/classe abstrata e n\xE3o para uma classe concreta</em>.</p><p>A depend\xEAncia em tempo de compila\xE7\xE3o da maioria dos aplicativos flui na dire\xE7\xE3o da execu\xE7\xE3o do runtime, o que resulta em um gr\xE1fico de depend\xEAncia direta. Por exemplo, se um m\xF3dulo A chama uma fun\xE7\xE3o/m\xE9todo no m\xF3dulo B, que por sua vez chama uma fun\xE7\xE3o/m\xE9todo no m\xF3dulo C, ent\xE3o em tempo de compila\xE7\xE3o, A depender\xE1 de B, que depender\xE1 de C, criando uma cadeia de depend\xEAncia como mostrado abaixo:</p><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuIf8JCvEJ4zLK0f9pIt8LqX9LKZEpot8p4aylFpmudmbXMek1I18paaiBbPm1f6Ew09E2kWYpX0HY785FJqx1PXAAoK5XQ3KjDIYmwloaZCJWJmafKvWfL0JiAY4AENYgkN2ukhKYjJaKfnkLg3KqSxvUIL5-Jcf8AlSSaehyWau7OjwaBiTKlDIWA4E0000" alt="uml diagram" loading="lazy"><figcaption>Depend\xEAncia direta</figcaption></figure><p>A aplica\xE7\xE3o do princ\xEDpio de invers\xE3o de depend\xEAncia permite que a <code>ClasseA</code> chame m\xE9todos em uma abstra\xE7\xE3o implementada por <code>ClasseB</code>, possibilitando que <code>ClasseA</code> chame <code>ClasseB</code> em tempo de execu\xE7\xE3o, mas que <code>ClasseB</code> dependa de uma interface controlada por <code>ClasseA</code> em tempo de compila\xE7\xE3o (invertendo assim a depend\xEAncia em tempo de compila\xE7\xE3o).</p><p>Em tempo de execu\xE7\xE3o, o fluxo de execu\xE7\xE3o do programa permanece inalterado, mas a introdu\xE7\xE3o de interfaces significa que diferentes implementa\xE7\xF5es dessas interfaces podem ser facilmente conectadas.</p><figure><img src="https://www.plantuml.com/plantuml/svg/TP9D2i8m48NtESNGVNi04QaD26x5dRW8wLIBQLBI50hgQLm8NgCNip-nrjfa4J8pRsO-7WaBmxGfCq58plY5dH2yFMQvWXY1gonF1QkVzKDvS2NG72vOKG1jx_Kq4K6NIQL1dJ2EiFsyegcKEgMqA_GB80XWD0GM7i0E4zJrI_AKDL4_PYHPtW8ByrkXtmgTzlY7Snh7A8_-B4RqYq5dCSXzpa6ia9TE_y1XuBzFLk_xgu6fXQ1A6gq4jgisegpKu8WLjGrsZaFVS8Seu-O7l040" alt="uml diagram" loading="lazy"><figcaption>Invers\xE3o da Depend\xEAncia</figcaption></figure><p>Assim a invers\xE3o de depend\xEAncia \xE9 uma parte essencial da constru\xE7\xE3o de aplicativos fracamente acoplados, pois os detalhes da implementa\xE7\xE3o podem ser escritos para depender e implementar abstra\xE7\xF5es de n\xEDvel superior, e n\xE3o o contr\xE1rio.</p><p>Os aplicativos resultantes s\xE3o mais test\xE1veis, modulares e sustent\xE1veis como resultado.</p><p>Os principais motivos para programar para uma interface/classe abstrata s\xE3o:</p><ul><li><em>Facilidade de manter o c\xF3digo</em> - As altera\xE7\xF5es ficam mais isoladas, n\xE3o precisa mudar tudo que aceitava uma classe concreta para aceitar outra necess\xE1ria. \xC8 poss\xEDvel mudar a implementa\xE7\xE3o sem quebrar a aplica\xE7\xE3o.</li><li><em>Fica f\xE1cil estender o c\xF3digo</em> - Permite que novas implementa\xE7\xF5es sejam feitas sem alterar tudo que esperava determinado objeto; certos comportamentos se tornam mais gen\xE9ricos podendo manipular objetos que ele desconhece desde que contenha o contrato esperado;</li><li><em>Fica mais f\xE1cil realizar testes</em> - \xC9 f\xE1cil substituir um objeto real de produ\xE7\xE3o por um falso que facilite o teste;</li></ul><p>Al\xE9m disso interfaces facilitam a redu\xE7\xE3o do acoplamento do c\xF3digo e ajudam a encapsular o c\xF3digo.</p><h3 id="como-podemos-obter-a-inversao-da-dependencia" tabindex="-1"><a class="header-anchor" href="#como-podemos-obter-a-inversao-da-dependencia" aria-hidden="true">#</a> Como podemos obter a invers\xE3o da depend\xEAncia?</h3><p>Uma das formas de obter a invers\xE3o da depend\xEAncia e usar o padr\xE3o de projeto da inje\xE7\xE3o da depend\xEAncia. Dessa forma injetamos a depend\xEAncia para obter a invers\xE3o da depend\xEAncia.</p><p>Como exemplo temos Jakarta Contexts and Dependency Injection (CDI) que \xE9 um framework para inje\xE7\xE3o de depend\xEAncia em Java. Ele fornece um conjunto de anota\xE7\xF5es e uma infraestrutura para criar e gerenciar objetos de maneira mais f\xE1cil e flex\xEDvel. O CDI \xE9 parte da especifica\xE7\xE3o Jakarta EE.</p><p>Outras op\xE7\xF5es s\xE3o de CDI em java s\xE3o:</p><ul><li><em>Spring Framework</em>: \xE9 uma das alternativas mais populares ao CDI, oferecendo inje\xE7\xE3o de depend\xEAncia, controle transacional, gerenciamento de seguran\xE7a, entre outras funcionalidades. O Spring possui uma comunidade grande e ativa, al\xE9m de uma ampla documenta\xE7\xE3o.</li><li><em>Google Guice</em>: \xE9 um framework de inje\xE7\xE3o de depend\xEAncia leve e f\xE1cil de usar, que utiliza anota\xE7\xF5es para definir as depend\xEAncias entre classes. O Guice foi criado pela Google e \xE9 usado em alguns projetos internos da empresa.</li><li><em>PicoContainer</em>: \xE9 um framework de inje\xE7\xE3o de depend\xEAncia que oferece uma solu\xE7\xE3o simples e eficiente para gerenciamento de objetos. O PicoContainer \xE9 leve e f\xE1cil de usar, e permite a cria\xE7\xE3o de aplicativos modulares e escal\xE1veis.</li></ul><h1 id="referencias" tabindex="-1"><a class="header-anchor" href="#referencias" aria-hidden="true">#</a> Refer\xEAncias</h1><hr class="footnotes-sep">`,139),r={class:"footnotes"},u={class:"footnotes-list"},m={id:"footnote1",class:"footnote-item"},k={href:"https://medium.com/desenvolvendo-com-paixao/o-que-%C3%A9-solid-o-guia-completo-para-voc%C3%AA-entender-os-5-princ%C3%ADpios-da-poo-2b937b3fc530",target:"_blank",rel:"noopener noreferrer"},v=a("a",{href:"#footnote-ref1",class:"footnote-backref"},"\u21A9\uFE0E",-1),b=a("a",{href:"#footnote-ref1:1",class:"footnote-backref"},"\u21A9\uFE0E",-1),f=a("a",{href:"#footnote-ref1:2",class:"footnote-backref"},"\u21A9\uFE0E",-1),g={id:"footnote2",class:"footnote-item"},h={href:"https://robsoncastilho.com.br/2013/02/06/principios-solid-principio-da-responsabilidade-unica-srp/",target:"_blank",rel:"noopener noreferrer"},w=a("a",{href:"#footnote-ref2",class:"footnote-backref"},"\u21A9\uFE0E",-1),q={id:"footnote3",class:"footnote-item"},y={href:"https://robsoncastilho.com.br/2013/02/23/principios-solid-principio-do-abertofechado-ocp/",target:"_blank",rel:"noopener noreferrer"},x=a("a",{href:"#footnote-ref3",class:"footnote-backref"},"\u21A9\uFE0E",-1),P={id:"footnote4",class:"footnote-item"},A={href:"https://stackify.com/solid-design-liskov-substitution-principle/",target:"_blank",rel:"noopener noreferrer"},j=a("a",{href:"#footnote-ref4",class:"footnote-backref"},"\u21A9\uFE0E",-1),C={id:"footnote5",class:"footnote-item"},O={href:"https://jackhiston.com/2017/8/3/the-interface-segregation-principle/",target:"_blank",rel:"noopener noreferrer"},_=a("a",{href:"#footnote-ref5",class:"footnote-backref"},"\u21A9\uFE0E",-1),I={id:"footnote6",class:"footnote-item"},S={href:"https://www.macoratti.net/20/05/c_isp1.htm",target:"_blank",rel:"noopener noreferrer"},D=a("a",{href:"#footnote-ref6",class:"footnote-backref"},"\u21A9\uFE0E",-1),z={id:"footnote7",class:"footnote-item"},E={href:"https://macoratti.net/20/05/c_invdep1.htm",target:"_blank",rel:"noopener noreferrer"},L=a("a",{href:"#footnote-ref7",class:"footnote-backref"},"\u21A9\uFE0E",-1);function F(R,T){const n=c("ExternalLinkIcon");return t(),p("div",null,[d,a("section",r,[a("ol",u,[a("li",m,[a("p",null,[s("Jo\xE3o Roberto da Paix\xE3o.O que \xE9 SOLID: O guia completo para voc\xEA entender os 5 princ\xEDpios da POO."),a("a",k,[s("https://medium.com/desenvolvendo-com-paixao/o-que-%C3%A9-solid-o-guia-completo-para-voc%C3%AA-entender-os-5-princ%C3%ADpios-da-poo-2b937b3fc530"),e(n)]),s(" (Acessado em 18/03/2022) "),v,s(),b,s(),f])]),a("li",g,[a("p",null,[s("Robson Castilho. Princ\xEDpio da Responsabilidade \xDAnica (SRP) "),a("a",h,[s("https://robsoncastilho.com.br/2013/02/06/principios-solid-principio-da-responsabilidade-unica-srp/"),e(n)]),s(". (Acessado em 15/03/2022) "),w])]),a("li",q,[a("p",null,[s("Robson Castilho. Princ\xEDpio do Aberto/Fechado (OCP) "),a("a",y,[s("https://robsoncastilho.com.br/2013/02/23/principios-solid-principio-do-abertofechado-ocp/"),e(n)]),s(". (Acessado em 15/03/2022) "),x])]),a("li",P,[a("p",null,[s("Princ\xEDpios de design SOLID explicados: o princ\xEDpio de substitui\xE7\xE3o de Liskov com exemplos de c\xF3digo. "),a("a",A,[s("https://stackify.com/solid-design-liskov-substitution-principle/"),e(n)]),s(),j])]),a("li",C,[a("p",null,[s("The Interface Segregation Principle. "),a("a",O,[s("https://jackhiston.com/2017/8/3/the-interface-segregation-principle/"),e(n)]),s(),_])]),a("li",I,[a("p",null,[s("Princ\xEDpio Da Segrega\xE7\xE3o da Interface(ISP). "),a("a",S,[s("https://www.macoratti.net/20/05/c_isp1.htm"),e(n)]),s(),D])]),a("li",z,[a("p",null,[s("Princ\xEDpio da Invers\xE3o da Depend\xEAncia. "),a("a",E,[s("https://macoratti.net/20/05/c_invdep1.htm"),e(n)]),s(),L])])])])])}const J=o(l,[["render",F],["__file","03_SOLID.html.vue"]]);export{J as default};
