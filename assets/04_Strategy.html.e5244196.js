import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as t,a as i,d as p,w as c,b as a,e as s,r}from"./app.9d651720.js";const l={},d=s(`<h1 id="strategy-gof" tabindex="-1"><a class="header-anchor" href="#strategy-gof" aria-hidden="true">#</a> Strategy (GOF)</h1><p><sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><h2 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao" aria-hidden="true">#</a> Inten\xE7\xE3o</h2><p>Definir uma fam\xEDlia de algoritmos, encapsular cada uma delas e torn\xE1-las intercambi\xE1veis. Strategy permite que o algoritmo varie independentemente dos clientes que o utilizam</p><h2 id="tambem-conhecido-como" tabindex="-1"><a class="header-anchor" href="#tambem-conhecido-como" aria-hidden="true">#</a> Tamb\xE9m conhecido como</h2><p>Policy</p><h2 id="motivacao" tabindex="-1"><a class="header-anchor" href="#motivacao" aria-hidden="true">#</a> Motiva\xE7\xE3o</h2><p>Existem muitos algoritmos para quebrar um stream de texto em linhas. Codificar de maneira fixa e r\xEDgida tais algoritmos nas classes que os utilizam n\xE3o \xE9 desej\xE1vel, por v\xE1rias raz\xF5es:</p><ul><li>clientes que necessitam de quebras de linhas se tornam mais complexos se incluirem o c\xF3digo de quebra de linhas. Isso os torna maiores e mais dif\xEDceis de manter, especialmente se suportam m\xFAltiplos algoritmos de quebra de linhas;</li><li>diferentes algoritmos ser\xE3o apropriados em diferentes situa\xE7\xF5es. N\xE3o queremos suportar m\xFAltiplos algoritmos de quebra de linhas se n\xE3o usarmos todos eles;</li><li>\xE9 dif\xEDcil adicionar novos algoritmos e variar os existentes quando a quebra de linha \xE9 parte integrante de um cliente.</li></ul><p>Podemos evitar esses problemas definindo classes que encapsulam diferentes algoritmos de quebra de linhas. Um algoritmo encapsulado dessa maneira \xE9 chamado <strong>strategy</strong> (estrat\xE9gia).</p><figure><img src="https://www.plantuml.com/plantuml/svg/XP5D3e8m44RtSufPwW8FG5nWF89UeC8Gcj2VJ4SZGUykKeKgYQxwfVEcRp8jWYYMiscXc5BPgX1mxuntGOjsjWTXTI4Ej5e3arUQXt07q5Q8QrNIH3lkeHmpHIHv1bsMS7avHG3hXB2bMj3LgJdFemu1SUOtiu5iXSzcU4rzqCQtb4w3-6wD4qNkIDV_q8vPTR-mkORRMvOjx0lWGxkeVla06bqHal7IeH9XVJeBXVJMa3Ik2W35i8Zn5-Fv0000" alt="uml diagram" loading="lazy"><figcaption>Exemplo Strategy.</figcaption></figure><p>Suponha que uma classe Composition seja respons\xE1vel pela manuten\xE7\xE3o e atualiza\xE7\xE3o das quebras de linhas de texto exibidas num visualizador de texto. As estrat\xE9gias de quebra de linhas n\xE3o s\xE3o implementadas pela classe Composition. Em vez disso, s\xE3o implementadas separadamente por subclasses da classe abstrata Compositor. Subclasses de Compositor implementam diferentes estrat\xE9gias:</p><ul><li><strong>SimpleCompositor</strong>: Implementa uma estrat\xE9gia simples que determina quebras de linha, uma por vez.</li><li><strong>TeXCompositor</strong>: Implementa o algoritmo TEX para encontrar quebras de linhas. Esta estrat\xE9gia tenta otimizar globalmente as quebras de linhas, ou seja, um par\xE1grafo por vez.</li><li><strong>ArrayCompositor</strong>: Implementa uma estrat\xE9gia que seleciona quebras de maneira que cada linha tenha um n\xFAmero fixo de itens. Por exemplo, \xE9 \xFAtil para quebrar uma cole\xE7\xE3o de \xEDcones em linhas.</li></ul><p>Uma Composition mant\xE9m uma refer\xEAncia para um objeto Compositor. Sempre que uma Composition reformata seu texto, repassa essa responsabilidade para o seu objeto Compositor. O cliente de Composition especifica qual Compositor deveria ser usado pela instala\xE7\xE3o do Compositor que ele deseja em Composition.</p><h2 id="aplicabilidade" tabindex="-1"><a class="header-anchor" href="#aplicabilidade" aria-hidden="true">#</a> Aplicabilidade</h2><p>Use o padr\xE3o Strategy quando:</p><ul><li>muitas classes relacionadas diferem somente no seu comportamento. As estrat\xE9gias fornecem uma maneira de configurar uma classe com um dentre muitos comportamentos;</li><li>voc\xEA necessita de variantes de um algoritmo. Por exemplo, pode definir algoritmos que refletem diferentes solu\xE7\xF5es de compromisso entre espa\xE7o/ tempo. As estrat\xE9gias podem ser usadas quando essas variantes s\xE3o implementadas como uma hierarquia de classes de algoritmos [HO871];</li><li>um algoritmo usa dados dos quais os clientes n\xE3o deveriam ter conhecimento. Use o padr\xE3o Strategy para evitar a exposi\xE7\xE3o das estruturas de dados complexas, espec\xEDficas do algoritmo;</li><li>uma classe define muitos comportamentos, e estes aparecem em suas opera\xE7\xF5es como m\xFAltiplos comandos condicionais da linguagem. Em vez de usar muitos comandos condicionais, mova os ramos condicionais relacionados para a sua pr\xF3pria classe Strategy.</li></ul><h2 id="estrutura" tabindex="-1"><a class="header-anchor" href="#estrutura" aria-hidden="true">#</a> Estrutura</h2><figure><img src="https://www.plantuml.com/plantuml/svg/dL5B3e903Dtt55tgWWiO5mX7y0JZK64IXZ4pZqI2tbqYC1f_97RHlhRljKsQ1YYFrjQKHgHh5GBdhe6SqPCUWHcyFoejgpLTYMBAUtW5ARkUL5qwRr3P5-uqYbqIoPim0NgiqruWCs7N4m_sPUHdJVQ79l-fcLcylIJ9-uqB_MoXdnDLfX0MUqB72l3cq4B2SzKAAbS4ebIQulwdCTu0" alt="uml diagram" loading="lazy"><figcaption>Estrutura Strategy.</figcaption></figure><h2 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes" aria-hidden="true">#</a> Participantes</h2><ul><li><strong>Strategy</strong> (Compositor) <ul><li>define uma interface comum para todos os algoritmos suportados. Context usa esta interface para chamar o algoritmo definido por uma Concrete Strategy</li></ul></li><li><strong>ConcreteStrategy</strong> (SimpleCompositor, TexCompositor, ArrayCompositor) <ul><li>implementa o algoritmo usando a interface de Strategy.</li></ul></li><li><strong>Context</strong> (Composition) <ul><li>\xE9 configurado com um objeto Concrete Strategy;</li><li>mant\xE9m uma refer\xEAncia para um objeto Strategy,</li><li>pode definir uma interface que permite a Strategy acessar seus dados.</li></ul></li></ul><h2 id="colaboracoes" tabindex="-1"><a class="header-anchor" href="#colaboracoes" aria-hidden="true">#</a> Colabora\xE7\xF5es</h2><ul><li>Strategy e Context interagem para implementar o algoritmo escolhido. Um contexto pode passar todos os dados requeridos pelo algoritmo para a estrat\xE9gia quando o algoritmo \xE9 chamado. Alternativamente, o contexto pode passar a si pr\xF3prio como argumento para opera\xE7\xF5es de Strategy. Isto permite \xE0 estrat\xE9gia chamar de volta o contexto conforme requerido.</li><li>Um contexto repassa solicita\xE7\xF5es dos seus clientes para sua estrat\xE9gia. Os clientes usualmente criam e passam um objeto Concrete Strategy para o contexto; ap\xF3s isso, interagem exclusivamente com o contexto. Freq\xFCentemente existe uma fam\xEDlia de classes Concrete Strategy para um cliente fazer sua escolha.</li></ul><h2 id="consequencias" tabindex="-1"><a class="header-anchor" href="#consequencias" aria-hidden="true">#</a> Consequ\xEAncias</h2><p>O padr\xE3o Strategy tem os seguintes benef\xEDcios e desvantagens:</p><ol><li>Fam\xEDlias de algoritmos relacionados. Hierarquias de classes Strategy definem uma fam\xEDlia de algoritmos e comportamentos para os contextos reutilizarem. A heran\xE7a pode ajudar a fatorar a funcionalidade comum dos algoritmos.</li><li>Uma alternativa ao uso de subclasses. A heran\xE7a oferece uma outra maneira de suportar uma variedade de algoritmos ou comportamentos. Voc\xEA pode especializar uma classe Context para lhe dar diferentes comportamentos. Mas isso congela o comportamentoem Context, misturando a implementa\xE7\xE3o do algoritmo coma de Context, tornando Context mais dif\xEDcil de compreender, manter e estender. E n\xE3o se pode variar de algoritmo dinamicamente. Voc\xEA acaba tendo muitas classes relacionadas cuja \xFAnica diferen\xE7a \xE9 o algoritmo ou comportamento que elas empregam. Encapsular os algoritmos em classes Strategy separadas permite variar o algoritmo independentemente do seu contexto, tornando mais f\xE1cil troc\xE1-los, compreend\xEA-los e estend\xEA-los.</li><li>Estrat\xE9gias eliminam comandos condicionais da linguagem de programa\xE7\xE3o. O padr\xE3o Strategy oferece uma alternativa ao uso de comandos condicionais para a sele\xE7\xE3o de comportamentos desejados. Quando diferentes comportamentos s\xE3o agrupados em uma classe \xE9 dif\xEDcil evitar o uso de comandos condicionais para a sele\xE7\xE3o do comportamento correto. O encapsulamento do comportamento em classes Strategy separadas elimina estes comandos condicionais. Por exemplo, sem usar estrat\xE9gias, o c\xF3digo para quebrar o texto em linhas se pareceria com</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> repair <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>breakingStrategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">SimpleStrategy</span><span class="token operator">:</span>
            <span class="token function">composeWithSimpleCompositor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">TexStrategy</span><span class="token operator">:</span>
            <span class="token function">composeWithTexCompositor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token comment">// junta os resultados com a composi\xE7\xE3o existente, se necess\xE1rio</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>O padr\xE3o Strategy elimina este comando case pela delega\xE7\xE3o da tarefa de quebra de linhas para um objeto Strategy:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> repair <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    compositor<span class="token punctuation">.</span><span class="token function">compose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// junta os resultados com a composi\xE7\xE3o existente, se necess\xE1rio</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Um c\xF3digo que cont\xE9m muitos estados freq\xFCentemente indica a necessidade de aplicar o padr\xE3o Strategy.</p><ol start="4"><li>A possibilidade de escolha de implementa\xE7\xF5es. As estrat\xE9gias podem fornecer diferentes implementa\xE7\xF5es do mesmo comportamento. O cliente pode escolher entre estrat\xE9gias com diferentes compromissos entre tempo e espa\xE7o.</li><li>Os clientes devem conhecer diferentes Strategies. O padr\xE3o tem uma defici\xEAncia potencial no fato de que um cliente deve compreender como Strategies diferem, antes que ele possa selecionar o mais apropriado. Os clientes podem ser expostos a detalhes e aspectos de implementa\xE7\xE3o. Portanto, voc\xEA deveria usar o padr\xE3o Strategy somente quando a varia\xE7\xE3o em comportamento \xE9 relevante para os clientes.</li><li>Custo de comunica\xE7\xE3o entre Strategye Context. A interface de Strategy \xE9 compartilhada por todas as classes Concrete Strategy, quer os algoritmos que elas implementem sejam triviais ou complexos. Da\xED ser prov\xE1vel que alguns Concrete Strategy n\xE3ousem toda a informa\xE7\xE3o passada atrav\xE9s desta interface; Concrete Strategies simples podem n\xE3o usar quaisquer dessas informa\xE7\xF5es! Isso significa que existir\xE3o situa\xE7\xF5es em que o contexto criar\xE1 e iniciar\xE1 par\xE2metros que nunca ser\xE3o usados. Se esse forum problema, voc\xEA necessitar\xE1 de um acoplamento maior entre Strategy e Context.</li><li>Aumento do n\xFAmero de objetos. Strategies aumentam o n\xFAmero de objetos numa aplica\xE7\xE3o. Algumas vezes, voc\xEA pode reduzir esse custo pela implementa\xE7\xE3o de estrat\xE9gias como objetos sem estados que os contextos possam compartilhar. Qualquer estado residual \xE9 mantido pelo contexto, que o passa em cada solicita\xE7\xE3o para o objeto Strategy.</li></ol><h2 id="implementacao" tabindex="-1"><a class="header-anchor" href="#implementacao" aria-hidden="true">#</a> Implementa\xE7\xE3o</h2><p>Considere os seguintes aspectos de implementa\xE7\xE3o:</p><ol><li>Definindo as interfaces de Strategy e Context. As interfaces de Strategy e Context podem fornecer a uma Concrete Strategy um acesso eficiente a quaisquer dados que necessite de um contexto, e vice-versa. Uma solu\xE7\xE3o \xE9 fazer com que context passe dados atrav\xE9s de par\xE2metros para as opera\xE7\xF5es de Strategy - em outras palavras, levar os dados para a estrat\xE9gia. Isso mant\xE9m Strategy e Context desacoplados. Por outro lado, Context pode passar dados de que Strategy n\xE3o necessita. Uma outra t\xE9cnica \xE9 fazer um contexto passar a si pr\xF3prio como um argumento, e ent\xE3o a estrat\xE9gia solicitar dados do contexto explicitamente. Alternativamente, a estrat\xE9gia pode armazenar uma refer\xEAncia para o seu contexto, eliminando de todo a necessidade de passar qualquer coisa. De ambas as maneiras, a estrat\xE9gia pode solicitar exatamente o que ela necessita. Por\xE9m, agora, Context deve definir uma interface mais elaborada para os seus dados, o que acopla Strategy e Context mais fortemente. As necessidades de um algoritmo espec\xEDfico e seus requisitos de dados determinar\xE3o qual a melhor t\xE9cnica.</li><li>Estrat\xE9gias como par\xE2metros template. Em C++, templates podem ser usados para configurar uma classe com uma estrat\xE9gia. Esta t\xE9cnica somente \xE9 aplic\xE1vel se: (1) Strategy pode ser selecionada em tempo de compila\xE7\xE3o e (2) ela n\xE3o tem que ser mudada em tempo de execu\xE7\xE3o. Nesse caso, a classe a ser configurada (por exemplo, Context) \xE9 definida como uma classe template que tem como par\xE2metro uma classe <em>Strategy:</em></li></ol><div class="language-objectivec ext-objectivec line-numbers-mode"><pre class="language-objectivec"><code>template <span class="token operator">&lt;</span>class AStrategy<span class="token operator">&gt;</span>
class Context
    <span class="token keyword">void</span> <span class="token function">Operation</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> theStrategy<span class="token punctuation">.</span><span class="token function">DoAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
private<span class="token punctuation">:</span>
    Astrategy theStrategy<span class="token punctuation">;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A classe \xE9 ent\xE3o configurada com uma classe Strategy quando \xE9 instanciada:</p><div class="language-objectivec ext-objectivec line-numbers-mode"><pre class="language-objectivec"><code>class MyStrategy <span class="token punctuation">{</span>
public<span class="token punctuation">:</span>
    <span class="token keyword">void</span> <span class="token function">DoAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
Context<span class="token operator">&lt;</span>MyStrategy<span class="token operator">&gt;</span> acontext<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Com <em>templates,</em> n\xE3o h\xE1 necessidade de definir uma classe abstrata que defina a interface para Strategy. Usar Strategy como um par\xE2metro de template tamb\xE9m permite vincular uma Strategy ao seu context estaticamente, o que pode melhorar a efici\xEAncia.</p><ol start="3"><li>Tornando os objetos Strategy opcionais. A classe Context pode ser simplificada se fizer sentido n\xE3o ter um objeto Strategy. Context verifica se ele tem o objeto Strategy antes de acess\xE1-lo. Se existir um, ent\xE3o Contexto utiliza normalmente. Se n\xE3o houver uma estrat\xE9gia, ent\xE3o Context executa o comportamento-padr\xE3o. O benef\xEDcio dessa solu\xE7\xE3o \xE9 que os clientes n\xE3o t\xEAm que lidar com nenhum objeto Strategy a menos que eles n\xE3o queiram o comportamento padr\xE3o.</li></ol><h2 id="exemplo-de-codigo" tabindex="-1"><a class="header-anchor" href="#exemplo-de-codigo" aria-hidden="true">#</a> Exemplo de c\xF3digo</h2><p>Daremos o c\xF3digo de alto n\xEDvel para o exemplo da se\xE7\xE3o Motiva\xE7\xE3o, o qual est\xE1 baseado na implementa\xE7\xE3o das classes Composition e Compositor em Inter Views [LCI+92].</p><p>A classe Composition mant\xE9m uma cole\xE7\xE3o de Component, a qual representa texto e elementos gr\xE1ficos num documento. Uma composi\xE7\xE3o arruma os objetos componentes em linhas usando uma inst\xE2ncia da subclasse Compositor, a qual encapsula uma estrat\xE9gia de quebra de linhas. Cada componente tem associados um tamanho natural, uma extensibilidade e uma compressibilidade. A extensibilidade define quanto o componente pode crescer al\xE9m do seu tamanho natural;compressibilidade \xE9 quanto ele pode ser comprimido. A composi\xE7\xE3o passa esses valores para um compositor, o qual os utiliza para determinar a melhor localiza\xE7\xE3o para quebras de linha.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Composition</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Compositor</span> compositor<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span><span class="token punctuation">&gt;</span></span> components<span class="token punctuation">;</span><span class="token comment">// a lista de componentes</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> componentCount<span class="token punctuation">;</span> <span class="token comment">// o n\xFAmero de componentes</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> lineWidth<span class="token punctuation">;</span> <span class="token comment">// largura da linha</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> lineBreaks<span class="token operator">:</span> <span class="token comment">// posi\xE7\xE3o das quebras das linhas em componentes</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> lineCount<span class="token punctuation">;</span> <span class="token comment">// n\xFAmero de linhas</span>

    <span class="token keyword">public</span> <span class="token class-name">Composition</span> <span class="token punctuation">(</span><span class="token class-name">Compositor</span> compositor<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>compositor <span class="token operator">=</span> compositor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">repair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Quando um novo layout \xE9 requerido, a composi\xE7\xE3o solicita ao seu compositor determinar onde colocar as quebras de linha. A composi\xE7\xE3o passa para o compositor tr\xEAs vetores que definem tamanhos naturais, extensibilidades e compressibilidades dos componentes. Ela tamb\xE9m passa o n\xFAmero de componentes, a largura da linha e um vetor que o compositor preenche com a posi\xE7\xE3o de cada quebra de linha. O compositor devolve o n\xFAmero de quebras calculadas.</p><p>A interface de Compositor permite \xE0 composi\xE7\xE3o passar ao compositor toda a informa\xE7\xE3o de que ele necessita. Isso \xE9 um exemplo da abordagem do tipo &quot;levando os dados para a estrat\xE9gia&quot;:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Compositor</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token class-name">Coord</span> natural<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Coord</span> stretch<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Coord</span> shrink<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> componentCount<span class="token punctuation">,</span> <span class="token keyword">int</span> lineWidth<span class="token punctuation">,</span> <span class="token keyword">int</span> breaks<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Note que compositor \xE9 uma classe abstrata (ou interface). As subclasses concretas definem estrat\xE9gias espec\xEDficas de quebras de linha.</p><p>A composi\xE7\xE3o chama a opera\xE7\xE3o <em>repair</em> do seu compositor. <em>repair</em> primeiramente inicia vetores com tamanho, extensibilidade e compressibilidade naturais de cada componente (cujos detalhes omitiremos). Ent\xE3o, ela chama o compositor para obter as quebras de linha e finalmente estabelece o layout dos componentes de acordo com as quebras (tamb\xE9m omitido):</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">repair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Coord</span><span class="token punctuation">[</span><span class="token punctuation">]</span> natural<span class="token punctuation">;</span>
    <span class="token class-name">Coord</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stretchability<span class="token operator">:</span>
    <span class="token class-name">Coord</span><span class="token punctuation">[</span><span class="token punctuation">]</span> shrinkability<span class="token punctuation">;</span>
    <span class="token keyword">int</span> componentCount<span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> breaks<span class="token punctuation">;</span>
    <span class="token comment">// prepara os arrays com os tamanhos desejados dos componentes</span>
    <span class="token comment">//...</span>
    <span class="token comment">// determina onde est\xE3o as quebras:</span>
    <span class="token keyword">int</span> breakCount<span class="token punctuation">;</span>
    breakCount <span class="token operator">=</span> compositor<span class="token punctuation">.</span><span class="token function">compose</span><span class="token punctuation">(</span>natural<span class="token punctuation">,</span> stretchability<span class="token punctuation">,</span> shrinkability<span class="token punctuation">,</span>componentCount<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lineWidth<span class="token punctuation">,</span> breaks<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// disp\xF5e os componentes de acordo com as quebras</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Examinemos agora as subclasses de Compositor. A classe SimpleCompositor examina componentes uma linha por vez para determinar onde as quebras deveriam ser colocadas:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleCompositor</span> <span class="token keyword">implements</span> <span class="token class-name">Compositor</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">SimpleCompositor</span><span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token class-name">Coord</span> natural<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Coord</span> stretch<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Coord</span> shrink<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> componentCount<span class="token punctuation">,</span> <span class="token keyword">int</span> lineWidth<span class="token punctuation">,</span> <span class="token keyword">int</span> breaks<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//...    </span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>O <em>TexCompositor</em> utiliza uma estrat\xE9gia mais global. Ele examina um par\xE1grafo por vez, levando em conta o tamanho dos componentes e sua extensibilidade. Ele tamb\xE9m tenta dar um &quot;aspecto&quot; uniforme ao par\xE1grafo atrav\xE9s da minimiza\xE7\xE3o dos espa\xE7os em branco entre componentes.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TexCompositor</span> <span class="token keyword">implements</span> <span class="token class-name">Compositor</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">TexCompositor</span><span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token class-name">Coord</span> natural<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Coord</span> stretch<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Coord</span> shrink<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> componentCount<span class="token punctuation">,</span> <span class="token keyword">int</span> lineWidth<span class="token punctuation">,</span> <span class="token keyword">int</span> breaks<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//...    </span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ArrayCompositor quebra os componentes em linhas a intervalos regulares.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayCompositor</span> <span class="token keyword">implements</span> <span class="token class-name">Compositor</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ArrayCompositor</span><span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token class-name">Coord</span> natural<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Coord</span> stretch<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Coord</span> shrink<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> componentCount<span class="token punctuation">,</span> <span class="token keyword">int</span> lineWidth<span class="token punctuation">,</span> <span class="token keyword">int</span> breaks<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//...    </span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Essas classes n\xE3o utilizam toda a informa\xE7\xE3o passada em <code>Compose</code>. O <code>SimpleCompositor</code> ignora a extensibilidade dos componentes, levando em conta somente suas larguras naturais. O <code>TeXCompositor</code> utiliza toda a informa\xE7\xE3o passada para ela, enquanto que <code>ArrayCompositor</code> ignora todas.</p><p>Para instanciar composition, voc\xEA passa a ela o compositor que deseja usar:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Composition</span> quick <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composition</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleCompositor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Composition</span> slick <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composition</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TexCompositor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Composition</span> iconic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composition</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayCompositor</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A interface de Compositor \xE9 cuidadosamente projetada para suportar todos os algoritmos de layout que as subclasses possam implementar. Voc\xEA n\xE3o deseja ter que mudar esta interface a cada nova subclasse introduzida porque isso exigir\xE1 mudar subclasses existentes. Em geral, as interfaces de Strategy eContext determinam tamb\xE9m qual padr\xE3o consegue o seu intento.</p><h2 id="usos-conhecidos" tabindex="-1"><a class="header-anchor" href="#usos-conhecidos" aria-hidden="true">#</a> Usos conhecidos</h2><p>Tanto ET++ [WGM88] como InterViews usam estrat\xE9gias para encapsular diferentes algoritmos de quebras de linhas na forma como descrevemos.</p><p>No sistema RTL destinado a otimiza\xE7\xE3o de c\xF3digo gerado por compiladores [JML92], estrat\xE9gias definem diferentes esquemas de aloca\xE7\xE3o de registradores (Register Allocator) e procedimentos de utiliza\xE7\xE3o (scheduling) do conjunto de instru\xE7\xF5es (RISCscheduler, CISCscheduler). Isso fornece flexibilidade no direcionamento do otimizador para diferentes arquiteturas de m\xE1quina.</p><p>O framework para calculadoras <em>(calculation engine)</em> do SwapsManager de ET++ computa pre\xE7os para diferentes instrumentos financeiros [EG92]. Suas abstra\xE7\xF5es-chave s\xE3o Instrumente YieldCurve (instrumento e curva de rendimentos, respectivamente). Diferentes instrumentos s\xE3o implementados como subclasses de Instrument. YieldCurve calcula coeficientes de desconto que determinam o valor presente de fluxos de caixa futuros. Ambas as classes delegam algum comportamento para objetos Strategy. O framework fornece uma fam\xEDlia de classes Concrete Strategy para gerar fluxos de caixa, avaliar permutas (swaps) e calcular coeficientes de desconto. Voc\xEA pode criar novas calculadoras atrav\xE9s da configura\xE7\xE3o de Instrument e YieldCurve com diferentes objetos Concrete Strategy. Esta abordagem suporta a combina\xE7\xE3o e casamento de implementa\xE7\xF5es existentes de Strategy, bem como a defini\xE7\xE3o de novas implementa\xE7\xF5es.</p><p>Os componentes de Booch usam estrat\xE9gias como argumentos-template. As classes de cole\xE7\xE3o de Booch suportam tr\xEAs tipos diferentes de estrat\xE9gias de aloca\xE7\xE3o de mem\xF3ria: administrada (aloca\xE7\xE3o dentro de um pool), controlada (aloca\xE7\xF5es/ desaloca\xE7\xF5es s\xE3o protegidas por travamentos (locks), e n\xE3o-administradas (o alocador de mem\xF3ria normal). Essas estrat\xE9gias s\xE3o passadas como argumentos-template para uma classe de cole\xE7\xE3o quando ela \xE9 instanciada. Por exemplo, uma Unbounded- Collection que usa a estrat\xE9gia n\xE3o-administrada \xE9 instanciada como UnboundedCollection&lt;MyItemType*, Unnanaged&gt;,</p><p>RApp \xE9 um sistema para o layout de circuitos integrados [GA89,AG90]. RAPP deve estabelecer o layout e as rotas dos condutores que conectam subsistemas do circuito. Algoritmos para determina\xE7\xE3o de rotas no RApp s\xE3o definidos como subclasses de uma classe abstrata Router. A Router \xE9 uma classe Strategy.</p><p>ObjectWindows da Borland [Bor94] utiliza estrat\xE9gias em caixas de di\xE1logo para assegurar que os usu\xE1rios forne\xE7am dados v\xE1lidos. Por exemplo, os n\xFAmeros devem estar em um certo intervalo, e um campo de entrada num\xE9rica deve aceitar somente d\xEDgitos. Validar que uma string est\xE1 correta pode exigir uma pesquisa numa tabela</p><p>ObjectWindows utiliza objetos Validator para encapsular estrat\xE9gias de valida\xE7\xE3o. Validators s\xE3o exemplos de objetos Strategy. Campos de entrada de dados delegam a estrat\xE9gia de valida\xE7\xE3o para um objeto Validator opcional. O cliente associa um validator a um campo, se for necess\xE1ria uma valida\xE7\xE3o (isto \xE9, um exemplo de uma estrat\xE9gia opcional). Quando o di\xE1logo \xE9 fechado, os campos de entrada solicitam aos seus validators para validarem os dados. A biblioteca de classes fornece validators para casos comuns, tal como um RangeValidator (um validator de intervalo) para n\xFAmeros. Novas estrat\xE9gias de valida\xE7\xE3o, espec\xEDficas do cliente, podem ser definidas facilmente, criando subclasses da classe Validator.</p><h2 id="padrao-relacionados" tabindex="-1"><a class="header-anchor" href="#padrao-relacionados" aria-hidden="true">#</a> Padr\xE3o relacionados</h2>`,68),u=s('<h2 id="referencias" tabindex="-1"><a class="header-anchor" href="#referencias" aria-hidden="true">#</a> Refer\xEAncias</h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>GAMMA, Erich. et al. Padr\xF5es de projetos: Solu\xE7\xF5es reutiliz\xE1veis de software orientados a objetos Bookman editora, 2009. <a href="#footnote-ref1" class="footnote-backref">\u21A9\uFE0E</a></p></li></ol></section>',3);function m(k,v){const e=r("RouterLink");return o(),t("div",null,[d,i("p",null,[p(e,{to:"/XX_Flyweight.html"},{default:c(()=>[a("Flyweight")]),_:1}),a(": objetos Strategy geralmente s\xE3o bons flyweights.")]),u])}const h=n(l,[["render",m],["__file","04_Strategy.html.vue"]]);export{h as default};
